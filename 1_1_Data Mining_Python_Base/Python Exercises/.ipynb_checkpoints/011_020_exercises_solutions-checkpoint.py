# -*- coding: utf-8 -*-
"""011-020_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gXiZ1z0VTsI8XFVZfu1LixKMUkNn97ms

## Numpy

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 11](#1)
* [Exercise 12](#2)
* [Exercise 13](#3)
* [Exercise 14](#4)
* [Exercise 15](#5)
* [Exercise 16](#6)
* [Exercise 17](#7)
* [Exercise 18](#8)
* [Exercise 19](#9)
* [Exercise 20](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np

np.__version__

"""### <a name='1'></a> Exercise 11
Build a one-dimensional numpy array of two-digit numbers.
Изградете едномерен масив numpy от двуцифрени числа.

__Expected result:__
```
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
       44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
       61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
       78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
       95, 96, 97, 98, 99])
```

__Tip:__ Use the _np.arange()_ function.

"""

np.arange(10, 100)

"""### <a name='2'></a> Exercise 12

Build the numpy array specified below:
Създайте масива numpy, посочен по-долу:
```
array([[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],
       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])
```

Note that the shape of the array is (9, 10).
Обърнете внимание, че формата на масива е (9, 10).

__Tip:__ Use the _np.arange()_ function and the _np.ndarray.reshape()_ method.
__Съвет:__ Използвайте функцията _np.arange()_ и метода _np.ndarray.reshape()_.

"""

# Solution 1
np.arange(10, 100).reshape(-1, 10)

# Solution 2
np.arange(10, 100).reshape(9, 10)

# Solution 3
np.arange(10, 100).reshape(9, -1)

"""### Reminder
Напомняне

### Identity matrix:
Идентификационна матрица:

Identity matrix - a square matrix which coefficients are given by the formula:
Матрица на идентичност - квадратна матрица, чиито коефициенти се дават по формулата:
$${\displaystyle a_{ij}={\begin{cases}1\quad {\text{dla}}\quad i=j\\[2pt]0\quad {\text{dla}}\quad i\neq j\end{cases}}}$$

#### Examples:
${\displaystyle I_{1}={\begin{bmatrix}1\end{bmatrix}},\;I_{2}={\begin{bmatrix}1&0\\0&1\end{bmatrix}},\;I_{3}={\begin{bmatrix}1&0&0\\0&1&0\\0&0&1\end{bmatrix}}}$

### <a name='3'></a> Exercise 13

Build a _6x6_ two-dimensional array - identity matrix. Use the _int_ data type.
Изградете _6x6_ двуизмерен масив - идентична матрица. Използвайте типа данни _int_.

__Expected result:__

```
array([[1, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0],
       [0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 1]])
```
__Tip:__ Use the _np.eye()_ function.
"""

np.eye(N=6, dtype='int')

"""### <a name='4'></a> Exercise 14

Set the random seed to 10. Then build a one-dimensional array consisting of 30 pseudo-randomly generated values from the uniform distribution above the $ [0, 1) $ interval.
Задайте произволното начално число на 10. След това изградете едномерен масив, състоящ се от 30 псевдослучайно генерирани стойности от равномерното разпределение над интервала $ [0, 1) $.

__Expected result:__

```
array([0.77132064, 0.02075195, 0.63364823, 0.74880388, 0.49850701,
       0.22479665, 0.19806286, 0.76053071, 0.16911084, 0.08833981,
       0.68535982, 0.95339335, 0.00394827, 0.51219226, 0.81262096,
       0.61252607, 0.72175532, 0.29187607, 0.91777412, 0.71457578,
       0.54254437, 0.14217005, 0.37334076, 0.67413362, 0.44183317,
       0.43401399, 0.61776698, 0.51313824, 0.65039718, 0.60103895])
```
__Tip:__ Use the function _np.random.rand()_.

"""

np.random.seed(10)
np.random.rand(30)

"""### <a name='5'></a> Exercise 15

Set the random seed to 20. Then build a two-dimensional array with the shape _(10, 4)_ pseudo-random values generated from the standard normal distribution $ N (0, 1) $.
Задайте произволното начално число на 20. След това изградете двуизмерен масив с форма _(10, 4)_ псевдослучайни стойности, генерирани от стандартното нормално разпределение $ N (0, 1) $.

__Expected result:__
```
array([[ 0.88389311,  0.19586502,  0.35753652, -2.34326191],
       [-1.08483259,  0.55969629,  0.93946935, -0.97848104],
       [ 0.50309684,  0.40641447,  0.32346101, -0.49341088],
       [-0.79201679, -0.84236793, -1.27950266,  0.24571517],
       [-0.0441948 ,  1.56763255,  1.05110868,  0.40636843],
       [-0.1686461 , -3.18970279,  1.12013226,  1.33277821],
       [-0.24333877, -0.13003071, -0.10901737,  1.55618644],
       [ 0.12877835, -2.06694872, -0.88549315, -1.10457948],
       [ 0.93286635,  2.059838  , -0.93493796, -1.61299022],
       [ 0.52706972, -1.55110074,  0.32961334, -1.13652654]])
```
__Tip:__ Use the function _np.random.randn()_.

"""

np.random.seed(20)
np.random.randn(10, 4)

"""### <a name='6'></a> Exercise 16
Set the random seed to 30. Then build a two-dimensional array with the shape _(10, 4)_ pseudo-random values generated from the normal distribution $ N (100, 5) $.
Задайте произволното начално число на 30. След това изградете двуизмерен масив с формата _(10, 4)_ псевдослучайни стойности, генерирани от нормалното разпределение $ N (100, 5) $.
$\mu=100$   
$\sigma^{2}=5$

__Expected result:__
```
array([[ 97.17349231, 103.41650023,  97.82942436, 101.05220329],
       [ 99.7748353 , 100.67930221,  96.14063068, 103.544381  ],
       [100.30029631,  97.52499594, 103.52901961, 100.24037271],
       [ 98.29153712,  98.2666258 , 103.09437633, 101.70027274],
       [ 99.36127721, 101.20382627,  95.34026547, 102.09694365],
       [ 99.98708001,  98.95468525,  99.05410904, 102.38025432],
       [ 93.50787269, 103.61547679, 103.18753701,  98.51356237],
       [102.20256689,  96.19764407,  97.54000366,  97.05813038],
       [101.81233513,  97.66380453,  98.45883627,  98.09317768],
       [102.48979932,  95.70413391,  98.43161651, 101.89861815]])
```
__Tip:__ Use the function _np.random.rand()_.

"""

np.random.seed(30)

sigma = np.sqrt(5)
mu = 100

sigma * np.random.randn(10, 4) + mu

"""### <a name='7'></a> Exercise 17
Iterating by array numpy $ A $ element by element (element-wise) print each element of the array to the console.
Итерация по масив numpy $ A $ елемент по елемент (по елемент) отпечатва всеки елемент от масива на конзолата.
```
A = np.array([[1, 4, 3],
              [5, 2, 6]])
```

__Tip:__ Use the _np.nditer()_ function.

"""

A = np.array([[1, 4, 3],
              [5, 2, 6]])

for i in np.nditer(A):
    print(i)

"""### <a name='8'></a> Exercise 18
Create a one-dimensional numpy array (vector) consisting of 11 equally spaced points from the interval $ [0, 1]. $
Създайте едномерен numpy масив (вектор), състоящ се от 11 еднакво разположени точки от интервала $ [0, 1]. $

__Expected result:__
```
array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])
```
__Tip:__ Use the _np.linspace()_ function.


"""

np.linspace(start=0, stop=1, num=11)

"""### <a name='9'></a> Exercise 19

Set the random seed to 42. Generate a one-dimensional array (vector) containing the possible result from the Big Lotto game.
Задайте произволното начално число на 42. Генерирайте едномерен масив (вектор), съдържащ възможния резултат от играта Big Lotto.

__Expected result:__
```
array([39, 29, 15, 43,  8, 21])
```

__Tip:__ The result of the game is a 6-element vector of values from 1 to 49 inclusive.
__Съвет:__ Резултатът от играта е 6-елементен вектор със стойности от 1 до 49 включително.

"""

np.random.seed(42)
np.random.randint(low=1, high=50, size=6)

"""### <a name='10'></a> Exercise 20
Build the two-dimensional _6x6_ size array below:
Изградете двуизмерния масив с размер _6x6_ по-долу:
```
array([[0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0],
       [0, 0, 2, 0, 0, 0],
       [0, 0, 0, 3, 0, 0],
       [0, 0, 0, 0, 4, 0],
       [0, 0, 0, 0, 0, 5]])
```
__Tip:__ Use the _np.diag()_ function.


"""

# Solution 1
np.diag(np.arange(6))

# Solution 2
np.diag([0, 1, 2, 3, 4, 5])