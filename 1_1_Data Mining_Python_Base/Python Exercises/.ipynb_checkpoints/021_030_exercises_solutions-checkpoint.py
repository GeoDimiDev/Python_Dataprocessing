# -*- coding: utf-8 -*-
"""021-030_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1APzlzBeEfJ0HftR0Qby-hn4VzROO13Wp

## Numpy

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 21](#1)
* [Exercise 22](#2)
* [Exercise 23](#3)
* [Exercise 24](#4)
* [Exercise 25](#5)
* [Exercise 26](#6)
* [Exercise 27](#7)
* [Exercise 28](#8)
* [Exercise 29](#9)
* [Exercise 30](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np

np.__version__

"""### <a name='1'></a> Exercise 21
Generate the following numpy array. Save the array to a binary file named _'array.npy'_ and then load that file back into another variable.
Генерирайте следния масив numpy. Запишете масива в двоичен файл с име _'array.npy'_ и след това заредете този файл обратно в друга променлива.

```
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
```
__Tip:__ Use the _np.save()_ and _np.load()_ functions.

"""

A = np.arange(12).reshape(-1, 4)
np.save('array.npy', A)

B = np.load('array.npy')
B

"""### <a name='2'></a> Exercise 22
Generate the following numpy array:
Генерирайте следния масив numpy:
```
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
```

Save the array to a text file named _'array.txt'_ with two decimal places and then load the file back into another variable.
Запишете масива в текстов файл с име _'array.txt'_ с два десетични знака и след това заредете файла обратно в друга променлива.

__Tip:__ Use the _np.savetxt()_ and _np.loadtxt()_ functions.

"""

A = np.arange(12, dtype='int').reshape(-1, 4)
np.savetxt(fname='array.txt', X=A, fmt='%0.2f')

B = np.loadtxt('array.txt')
B

"""### <a name='3'></a> Exercise 23
Generate and convert the following numpy array into a list:
Генерирайте и преобразувайте следния масив numpy в списък:
```
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
```
__Tip:__ Use the _np.array.tolist()_ method.

"""

A = np.arange(12, dtype='int').reshape(-1, 4)
A.tolist()

"""### <a name='4'></a> Exercise 24
The following numpy array is given:
Даден е следният масив numpy:
```
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
```

Using the cut operator, transform the array into the following:
Използвайки оператора cut, трансформирайте масива в следното:

* swap rows (first with last)

```
array([[ 8,  9, 10, 11],
       [ 4,  5,  6,  7],
       [ 0,  1,  2,  3]])
```
"""

A[::-1]

"""* swap columns (reverse order)

```
array([[ 3,  2,  1,  0],
       [ 7,  6,  5,  4],
       [11, 10,  9,  8]])
```
"""

A[:, ::-1]

"""* swap rows and columns (reverse order)

```
array([[11, 10,  9,  8],
       [ 7,  6,  5,  4],
       [ 3,  2,  1,  0]])
```
"""

A[::-1, ::-1]

"""### <a name='5'></a> Exercise 25
The following numpy array:
Следният numpy масив:
```
array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
```
Transform to array:

```
array([[0., 0., 0., 0., 0., 0.],
       [0., 1., 1., 1., 1., 0.],
       [0., 1., 1., 1., 1., 0.],
       [0., 1., 1., 1., 1., 0.],
       [0., 1., 1., 1., 1., 0.],
       [0., 0., 0., 0., 0., 0.]])
```

__Tip:__ Use the _np.pad()_ function.
"""

A = np.ones(shape=(4, 4))
np.pad(A, pad_width=1, constant_values=0)

"""### <a name='6'></a> Exercise 26
The following numpy array:
Следният numpy масив:
```
array([[0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0]])
```

Transform to array:
```
array([[10,  0, 10,  0, 10,  0],
       [ 5,  0,  5,  0,  5,  0],
       [10,  0, 10,  0, 10,  0],
       [ 5,  0,  5,  0,  5,  0],
       [10,  0, 10,  0, 10,  0],
       [ 5,  0,  5,  0,  5,  0]])
```

__Tip:__ Use the cut operator and assign the appropriate values.
__Съвет:__ Използвайте оператора за изрязване и задайте подходящите стойности.

"""

A = np.zeros(shape=(6, 6), dtype='int')
A[::2, ::2] = 10
A[1::2, ::2] = 5
A

"""### <a name='7'></a> Exercise 27
Combine the following arrays: $ A $ and $ B $ into one array.
Комбинирайте следните масиви: $ A $ и $ B $ в един масив.
```
A = np.arange(12).reshape(-1, 4)
B = np.array([[4, 3, 7, 2],
              [0, 5, 2, 6]])
```

__The expected result:__

```
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [ 4,  3,  7,  2],
       [ 0,  5,  2,  6]])
```

__Tip:__ Use the _np.append()_ function.

"""

A = np.arange(12).reshape(-1, 4)
B = np.array([[4, 3, 7, 2],
              [0, 5, 2, 6]])

np.append(A, B, axis=0)

"""### <a name='8'></a> Exercise 28
Use the $ A $ and $ B $ arrays below to extract the common elements (intersection) of the arrays.
Използвайте масивите $ A $ и $ B $ по-долу, за да извлечете общите елементи (пресечната точка) на масива.

```
A = np.arange(8).reshape(-1, 4)
B = np.array([[9, 10, 11, 3],
              [2, 8, 0, 9]])      
```
__Tip:__ Use the _np.intersect1d()_ function.
"""

A = np.arange(8).reshape(-1, 4)
B = np.array([[9, 10, 11, 3],
              [2, 8, 0, 9]])

np.intersect1d(A, B)

"""### <a name='9'></a> Exercise 29
The following numpy array $ A $ is given.
Find the unique values of this array.
Даден е следният numpy масив $ A $.
Намерете уникалните стойности на този масив.
```
A = np.array([[5, 1, 2, 1, 2],
              [9, 1, 9, 7, 5],
              [4, 1, 5, 7, 9]])
```

__Tip:__ Use the _np.unique()_ function.
"""

np.random.seed(10)
A = np.random.randint(low=1, high=10, size=(3, 5))
np.unique(A)

"""### <a name='10'></a> Exercise 30
The array below is given:
Даден е масивът по-долу:
```
A = np.array([[0.4, 0.3, 0.3],
              [0.1, 0.1, 0.8],
              [0.2, 0.5, 0.3]])
```
Return indexes with maximum values for a given row.
Връща индекси с максимални стойности за даден ред.

__Tip:__ Use the _np.argmax()_ function.
"""

A = np.array([[0.4, 0.3, 0.3],
              [0.1, 0.1, 0.8],
              [0.2, 0.5, 0.3]])

np.argmax(A, axis=1)

