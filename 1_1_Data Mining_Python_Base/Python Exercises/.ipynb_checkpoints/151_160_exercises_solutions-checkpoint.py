# -*- coding: utf-8 -*-
"""151-160_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WRqykt9h_boSJvxDggOwka6JNHquMtA0

## Pandas

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 151](#1)
* [Exercise 152](#2)
* [Exercise 153](#3)
* [Exercise 154](#4)
* [Exercise 155](#5)
* [Exercise 156](#6)
* [Exercise 157](#7)
* [Exercise 158](#8)
* [Exercise 159](#9)
* [Exercise 160](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np
import pandas as pd

np.random.seed(42)
np.__version__

"""### <a name='1'></a> Exercise 151
The following _DataFrame_ object is given:
Даден е следният обект _DataFrame_:
```
df = pd.DataFrame(np.random.rand(10, 4), columns=list('ABCD'))
```


"""

df = pd.DataFrame(np.random.rand(10, 4), columns=list('ABCD'))
df

"""Extract the rows of the _df_ object for which the _C_ column is greater than 0.8."""
"""Извлечете редовете на _df_ обекта, за които колоната _C_ е по-голяма от 0,8."""

df.loc[df['C'] > 0.8]

"""### <a name='2'></a> Exercise 152
Extract the rows of the _df_ object for which the _C_ column is greater than 0.3 and the _D_ column is less than 0.7.
Извлечете редовете на обекта _df_, за които колоната _C_ е по-голяма от 0,3, а колоната _D_ е по-малка от 0,7.
"""

df.loc[(df['C'] > 0.3) & (df['D'] < 0.7)]

"""### <a name='3'></a> Exercise 153
Iterate through the first five rows of the _df_ object. Print each row to the console.
Преминете през първите пет реда на обекта _df_. Отпечатайте всеки ред в конзолата.

__Tip:__ Use the _pd.DataFrame.iterrows()_ function.
"""

for index, row in df.head().iterrows():
    print(row)

"""### <a name='4'></a> Exercise 154
Set the value in row with index 3 for column B as _np.nan_.
Use _df.iloc_.
Задайте стойността в ред с индекс 3 за колона B като _np.nan_.
Използвайте _df.iloc_.
"""

df.iloc[3, 1] = np.nan

"""Set the value in the row at index 8 for column D as _np.nan_. Use _df.loc_."""
"""Задайте стойността в реда с индекс 8 за колона D като _np.nan_. Използвайте _df.loc_."""

df.loc[8, 'D'] = np.nan

"""### <a name='5'></a> Exercise 155
Delete all rows from object _df_ containing missing values and assign to variable _df1_. Display variable _df1_.
Изтрийте всички редове от обект _df_, съдържащи липсващи стойности, и присвоете на променлива _df1_. Показване на променлива _df1_.
"""

df1 = df.dropna()
df1

"""### <a name='6'></a> Exercise 156
Note that the index after removing two rows in the _df1_ object is not in turn. Reset the index (do not add a new column, just reset the index). Display variable _df1_.
Имайте предвид, че индексът след премахване на два реда в обекта _df1_ не е на свой ред. Нулирайте индекса (не добавяйте нова колона, просто нулирайте индекса). Показване на променлива _df1_.
"""

df1 = df1.reset_index(drop=True)
df1

"""### <a name='7'></a> Exercise 157
Let's go back to the _df_  object. Determine the number of missing elements in the _df_ object for each column.
Да се върнем към обекта _df_. Определете броя на липсващите елементи в _df_ обекта за всяка колона.
"""

df.isnull().sum()

"""### <a name='8'></a> Exercise 158
Fill in the missing values with the value 0 and assign to the variable _df_.
Попълнете липсващите стойности със стойност 0 и присвоете на променливата _df_.

"""

df = df.fillna(0)
df

"""### <a name='9'></a> Exercise 159
Replace the order of the columns in the _df_ object with the one given below:
* D, A, B, C

and assign to _df_.

Заменете реда на колоните в обекта _df_ с дадения по-долу:
* D, A, B, C

и присвоете на _df_.
"""

df = df[['D', 'A', 'B', 'C']]
df

"""### <a name='10'></a> Exercise 160
Remove the $ D $ column from the _df_ object.
Премахнете колоната $ D $ от обекта _df_.
"""

# Solution 1
df.drop('D', axis=1)

# Solution 2
del df['D']
df

