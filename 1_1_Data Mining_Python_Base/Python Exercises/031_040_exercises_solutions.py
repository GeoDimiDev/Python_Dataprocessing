# -*- coding: utf-8 -*-
"""031-040_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AS1COBhT26gUKXxkGEjZ6KJi3uzG0fJC

## Numpy

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 31](#1)
* [Exercise 32](#2)
* [Exercise 33](#3)
* [Exercise 34](#4)
* [Exercise 35](#5)
* [Exercise 36](#6)
* [Exercise 37](#7)
* [Exercise 38](#8)
* [Exercise 39](#9)
* [Exercise 40](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np

np.__version__

"""### <a name='1'></a> Exercise 31
Sort the array $ A $ below:
* by row (ascending)
* by column (ascending)
Сортирайте масива $ A $ по-долу:
* по ред (възходящо)
* по колона (възходящо)

```
A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 4.99],
              [14.99, 2.39, 7.29]])
```
__Tip:__ Use the _np.sort()_ function.

"""

A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 4.99],
              [14.99, 2.39, 7.29]])

# row (ascending)
np.sort(A)

# column (ascending)
np.sort(A, axis=0)

"""### <a name='2'></a> Exercise 32
Extract all elements of the $ A $ array with a value greater than 8.
Извлечете всички елементи от масива $ A $ със стойност, по-голяма от 8.

```
A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 4.99],
              [14.99, 2.39, 7.29]])
```
"""

A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 4.99],
              [14.99, 2.39, 7.29]])

A[A > 8]

"""### <a name='3'></a> Exercise 33
The following array $ A $ is given. Replace elements greater than 10 with a fixed value of 10.
Даден е следният масив $ A $. Заменете елементи, по-големи от 10, с фиксирана стойност 10.

```
A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 14.99],
              [14.99, 2.39, 7.29]])
```
__Tip:__ Use the _np.where()_ function.

"""

A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 14.99],
              [14.99, 2.39, 7.29]])

np.where(A > 10.0, 10.0, A)

"""### <a name='4'></a> Exercise 34
Present the following $ A $ two-dimensional array as a "flattened" one-dimensional array.
Представете следния $ A $ двумерен масив като "сплескан" едномерен масив.

```
A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 14.99],
              [14.99, 2.39, 7.29]])
```
__Expected result:__
```
array([ 4.99,  3.49,  9.99,  1.99,  9.99, 14.99, 14.99,  2.39,  7.29])
```

__Tip:__ Use the _np.ravel()_ function.
"""

A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 14.99],
              [14.99, 2.39, 7.29]])

np.ravel(A)

"""### <a name='5'></a> Exercise 35
Build an array of the same shape and data type as the $ A $ array and fill it with a constant value of 0.0.
Изградете масив със същата форма и тип данни като масива $ A $ и го попълнете с постоянна стойност 0,0.

```
A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 14.99],
              [14.99, 2.39, 7.29]])
```
__Expected result:__
```
array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])
```

__Tip:__ Use the _np.zeros_like()_ function.
"""

A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 14.99],
              [14.99, 2.39, 7.29]])

np.zeros_like(A)

"""### <a name='6'></a> Exercise 36

Build an array of the same shape and data type as the $ A $ array and fill it with a constant value of 9.99.
Изградете масив със същата форма и тип данни като масива $ A $ и го попълнете с постоянна стойност от 9,99.

```
A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 14.99],
              [14.99, 2.39, 7.29]])
```
__Expected result:__

```
array([[9.99, 9.99, 9.99],
       [9.99, 9.99, 9.99],
       [9.99, 9.99, 9.99]])
```

__Tip:__ Use the function _np.full_like()_.



"""

A = np.array([[4.99, 3.49, 9.99],
              [1.99, 9.99, 14.99],
              [14.99, 2.39, 7.29]])

np.full_like(A, 9.99)

"""### <a name='7'></a> Exercise 37
Build a two-dimensional array (lower triangular matrix) below:
Изградете двуизмерен масив (долна триъгълна матрица) по-долу:
```
array([[1., 0., 0., 0., 0.],
       [1., 1., 0., 0., 0.],
       [1., 1., 1., 0., 0.],
       [1., 1., 1., 1., 0.],
       [1., 1., 1., 1., 1.]])
```
__Tip:__ Use the _np.tri()_ function.
"""

np.tri(N=5)

"""### <a name='8'></a> Exercise 38
Create any $ (2, 3, 4) $ 3-dimensional array.
Създайте всеки $ (2, 3, 4) $ 3-измерен масив.
"""

A = np.array([[[4, 5, 4, 2],
               [6, 3, 5, 1],
               [5, 2, 1, 2]],

              [[7, 2, 3, 1],
               [6, 2, 0, 9],
               [0, 1, 9, 1]]])

A.shape

"""### <a name='9'></a> Exercise 39
Generate a two-dimensional array _(200, 300)_ filled with random values from 0 to 255 (inclusive) with data type _np.uint8_ and assign to the variable _image_.
Генерирайте двуизмерен масив _(200, 300)_, пълен с произволни стойности от 0 до 255 (включително) с тип данни _np.uint8_ и присвоете на променливата _image_.

"""

image = np.random.randint(low=0, high=256, size=(200, 300), dtype=np.uint8)
image

"""Then run the following block of code. As a result, you'll get a preview of the randomly generated black and white image."""
"""След това изпълнете следния блок код. В резултат на това ще получите визуализация на произволно генерираното черно-бяло изображение."""

from google.colab.patches import cv2_imshow

cv2_imshow(image)

"""### <a name='10'></a> Exercise 40
Sort the array _image_ from the previous exercise along the row in ascending order. Then display the image with the _cv2_imshow()_ function.
Сортирайте масива _image_ от предишното упражнение по реда във възходящ ред. След това покажете изображението с функцията _cv2_imshow()_.
"""

cv2_imshow(np.sort(image))

"""Sort the array _image_ from the previous exercise along the column in ascending order. Then display the image with the _cv2_imshow()_ function."""

cv2_imshow(np.sort(image, axis=0))