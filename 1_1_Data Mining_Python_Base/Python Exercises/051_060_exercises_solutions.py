# -*- coding: utf-8 -*-
"""051-060_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b4Z_6jzOwGeLeFqqdds9flsSVDeGSXGJ

## Numpy

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 51](#1)
* [Exercise 52](#2)
* [Exercise 53](#3)
* [Exercise 54](#4)
* [Exercise 55](#5)
* [Exercise 56](#6)
* [Exercise 57](#7)
* [Exercise 58](#8)
* [Exercise 59](#9)
* [Exercise 60](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np

np.__version__

"""### <a name='1'></a> Exercise 51
Two arrays $ A $ and $ B $ are given below:
По-долу са дадени два масива $ A $ и $ B $:

```
A = np.array([[3, 4, 5],
              [8, 3, 1]])
B = np.array([[0, 5, 2],
              [4, 2, 1]])
```
* Concatenate these arrays as follows:
* Свържете тези масиви, както следва:

```
array([[3, 4, 5],
       [8, 3, 1],
       [0, 5, 2],
       [4, 2, 1]])
```

__Tip:__ Use the _np.concatenate()_ function.
"""

A = np.array([[3, 4, 5],
              [8, 3, 1]])
B = np.array([[0, 5, 2],
              [4, 2, 1]])

np.concatenate((A, B), axis=0)

"""* Concatenate these arrays as follows:
"""* Свържете тези масиви, както следва:

```
array([[3, 4, 5, 0, 5, 2],
       [8, 3, 1, 4, 2, 1]])
```
__Tip:__ Use the _np.concatenate()_ function.
"""

np.concatenate((A, B), axis=1)

"""### <a name='2'></a> Exercise 52
The first array is given containing the data (_data_) and the second array containing the target class (_target_) for the given row:
Даден е първият масив, съдържащ данните (_data_), а вторият масив, съдържащ целевия клас (_target_) за дадения ред:

```
data = np.array([[4.3, 4.2],
                 [3.1, 3.6]])
target = np.array([[0],
                   [1]])
```

Concatenate these arrays into one as shown below:
Свържете тези масиви в един, както е показано по-долу:

```
array([[4.3, 4.2, 0. ],
       [3.1, 3.6, 1. ]])
```
"""

data = np.array([[4.3, 4.2],
                 [3.1, 3.6]])
target = np.array([[0],
                   [1]])

np.concatenate((data, target), axis=1)

"""### <a name='3'></a> Exercise 53
The following three one-dimensional arrays are given:
Дадени са следните три едномерни масива:
```
feature1 = np.array([1.6, 0.9, 2.2])
feature2 = np.array([0.4, 1.3, 3.2])
feature3 = np.array([1.4, 0.3, 1.2])
```
Transform each of these arrays into a column and concatenate them into one large array.
Трансформирайте всеки от тези масиви в колона и ги свържете в един голям масив.

__Expected result:__
```
array([[1.6, 0.4, 1.4],
       [0.9, 1.3, 0.3],
       [2.2, 3.2, 1.2]])
```
__Tip:__ Use the function _np.column_stack()_.

"""

feature1 = np.array([1.6, 0.9, 2.2])
feature2 = np.array([0.4, 1.3, 3.2])
feature3 = np.array([1.4, 0.3, 1.2])

np.column_stack((feature1, feature2, feature3))

"""### <a name='4'></a> Exercise 54
The following two-dimensional array is given:
Даден е следният двуизмерен масив:
```
A = np.random.randint(low=0, high=7, size=(5, 8))
A[:, :2] = 0
A[:, -2:] = 1
A
```
```
array([[0, 0, 4, 6, 2, 4, 1, 1],
       [0, 0, 6, 2, 2, 4, 1, 1],
       [0, 0, 1, 3, 5, 5, 1, 1],
       [0, 0, 3, 1, 5, 4, 1, 1],
       [0, 0, 2, 6, 1, 3, 1, 1]])
```
Split an array into three parts so that the first two columns formed the first array $ A1 $, four consecutive second array $ A2 $ and the last two third array $ A3 $.
Разделете масив на три части, така че първите две колони да формират първия масив $ A1 $, четири последователни втори масив $ A2 $ и последните две трети масив $ A3 $.

__Tip:__ Use the function _np.split()_.
"""

A = np.random.randint(low=0, high=7, size=(5, 8))
A[:, :2] = 0
A[:, -2:] = 1

A1, A2, A3 = np.split(A, [2, 6], axis=1)
print(A1)
print(A2)
print(A3)

"""### <a name='5'></a> Exercise 55
The following numpy array $ A $ is given:
Даден е следният numpy масив $ A $:

```
A = np.random.randint(low=0, high=2, size=(10, 6))
```

Calculate the total number of non-zero elements for this array.
Изчислете общия брой ненулеви елементи за този масив.

__Tip:__ Use the function _np.count_nonzero()_.

"""

A = np.random.randint(low=0, high=2, size=(10, 6))

np.count_nonzero(A)

"""Calculate the total number of non-zero elements for each row in this array.
Изчислете общия брой ненулеви елементи за всеки ред в този масив.

__Tip:__ Use the function _np.count_nonzero()_.
"""

np.count_nonzero(A, axis=1)

"""### <a name='6'></a> Exercise 56
An example numpy array $ A $ is given below:
Примерен numpy масив $ A $ е даден по-долу:

```
A = np.random.randn(10, 4)
```

```
array([[-0.53441645, -1.49505387, -0.78925833,  0.74371128],
       [-0.21216142, -0.42686879,  0.50144833,  1.15818665],
       [ 0.25711687,  0.3145129 ,  1.37186213,  0.17555329],
       [-0.30928855,  0.6731255 , -0.25663018, -0.36782572],
       [ 1.27373362, -0.29195267, -2.65517605,  0.34551794],
       [-0.39551645, -0.28913686,  0.45293633, -0.16606091],
       [ 0.21493883, -2.02231493, -0.94305681,  1.40395874],
       [-0.0185508 , -1.67350462, -1.07253183, -0.99258618],
       [ 0.10234768, -0.43260928, -0.6591823 ,  0.0039373 ],
       [ 0.4777541 , -0.25902864, -0.57470921, -0.42149822]])
```

Set the numpy library option to print arrays with specified precision. Set its value to 4 and print the $ A $ array.
Задайте опцията на библиотеката numpy за отпечатване на масиви с определена точност. Задайте стойността му на 4 и отпечатайте масива $ A $.

"""

A = np.random.randn(10, 4)

np.set_printoptions(precision=4)
A

"""### <a name='7'></a> Exercise 57

The following numpy array $ A $ is given:
Даден е следният numpy масив $ A $:

```
A = np.array([1.2e-6, 1.7e-7])
```
Set the precision value to 8. Then set the appropriate numpy library option to suppress mathematical notation. Print the array $ A $.
Задайте стойността на точността на 8. След това задайте подходящата опция за библиотека numpy, за да потиснете математическата нотация. Отпечатайте масива $ A $.

__Expected result:__
```
array([0.0000012 , 0.00000017])
```

"""

A = np.array([1.2e-6, 1.7e-7])

np.set_printoptions(suppress=True, precision=8)
A

"""### <a name='8'></a> Exercise 58
The following numpy array $ A $ is given:
Даден е следният numpy масив $ A $:
```
A = np.random.randn(8, 4)
```
Remove the third column from the $ A $ array.
Премахнете третата колона от масива $ A $.

__Expected result:__
```
array([[-0.55692881, -0.66003196,  0.70856031],
       [ 0.22378737, -0.19796576, -0.16889332],
       [ 0.26062786,  0.29865445, -0.92259267],
       [-2.40317659,  1.79961876, -1.96495796],
       [ 0.13051561, -1.7085185 ,  0.54885043],
       [ 1.77268727,  0.38751181, -0.05141955],
       [-1.80858596, -0.45075211,  0.15332866],
       [ 1.94218961, -1.93679529, -1.83350954]])
```
__Tip:__ Use the _np.delete()_ function.

"""

A = np.random.randn(8, 4)

np.delete(A, [2], axis=1)

"""### <a name='9'></a> Exercise 59

A one-dimensional array $ v $ (vector) is given:
Даден е едномерен масив $ v $ (вектор):

```
v = np.array([3, 4, -2])
```
Calculate the norm of the vetor $ v $.
Изчислете нормата на вектора $ v $.

"""

v = np.array([3, 4, -2])

np.linalg.norm(v)

"""### <a name='10'></a> Exercise 60
An example $ A $ array is given below:

```
A = np.random.randint(10, size=(100, 30))
```
Set the numpy library option to print 10 edge elements. Print the array $ A $.
Задайте опцията за библиотека numpy за отпечатване на 10 крайни елемента. Отпечатайте масива $ A $.

"""

A = np.random.randint(10, size=(100, 30))

np.set_printoptions(edgeitems=10)
A

