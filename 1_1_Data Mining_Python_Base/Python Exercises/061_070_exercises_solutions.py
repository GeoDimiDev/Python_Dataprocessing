# -*- coding: utf-8 -*-
"""061-070_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1liKds90y-JfHX3k0lKxEl3cl4OeYKZcG

## Numpy

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 61](#1)
* [Exercise 62](#2)
* [Exercise 63](#3)
* [Exercise 64](#4)
* [Exercise 65](#5)
* [Exercise 66](#6)
* [Exercise 67](#7)
* [Exercise 68](#8)
* [Exercise 69](#9)
* [Exercise 70](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np

np.set_printoptions(suppress=True, precision=4)
np.random.seed(42)
np.__version__

"""### <a name='1'></a> Exercise 61
The following two arrays $ A $ and $ B $ are given:
Дадени са следните два масива $ A $ и $ B $:

```
A = np.array([[3, 4, 9, 2],
              [5, 3, 2, 5]])
B = np.array([[4, 3, 2, 5],
              [6, 3, 1, 6]])
```

Determine an array consisting of arithmetic means $ A $ and $ B $ of the corresponding elements.
Определете масив, състоящ се от средни аритметични $ A $ и $ B $ на съответните елементи.

__Expected result:__
```
array([[3.5, 3.5, 5.5, 3.5],
       [5.5, 3. , 1.5, 5.5]])
```
"""

A = np.array([[3, 4, 9, 2],
              [5, 3, 2, 5]])
B = np.array([[4, 3, 2, 5],
              [6, 3, 1, 6]])

# Solution 1
(A + B) / 2

# Solution 2
np.divide(np.add(A, B), 2)

"""### <a name='2'></a> Exercise 62
The following two arrays $ A $ and $ B $ are given:
Дадени са следните два масива $ A $ и $ B $:
```
A = np.array([[3, 4, 9, 2],
              [5, 3, 2, 5]])
B = np.array([[4, 3, 2, 5],
              [6, 3, 1, 6]])
```
Multiply arrays element-by-element (element-wise).
Умножаване на масиви елемент по елемент (по елемент).
"""

A = np.array([[3, 4, 9, 2],
              [5, 3, 2, 5]])
B = np.array([[4, 3, 2, 5],
              [6, 3, 1, 6]])

# Solution 1
A * B

# Solution 2
np.multiply(A, B)

"""### <a name='3'></a> Exercise 63
The following numpy array $ A $ is given:
Даден е следният numpy масив $ A $:
```
A = np.array([[3, 4, 9, 2],
              [5, 3, 2, 5]])
```
Determine the root of each element of the array $ A $.
Определете корена на всеки елемент от масива $ A $.

__Tip:__ Use the _np.sqrt()_ function.
"""

A = np.array([[3, 4, 9, 2],
              [5, 3, 2, 5]])

np.sqrt(A)

"""### <a name='4'></a> Exercise 64
The following arrays $ A $ and $ B $ are given:
Дадени са следните масиви $ A $ и $ B $:
```
A = np.linspace(0, np.pi / 2, 20)
B = np.full(shape=(20,), fill_value=1, dtype='float')
```
Check the Pythagorean formula for sines and cosines on the $ A $ array and then compare the result with the $ B $ array. Use the _np.allclose()_ function.
Проверете формулата на Питагор за синуси и косинуси на масива $ A $ и след това сравнете резултата с масива $ B $. Използвайте функцията _np.allclose()_.

__Pythagorean formula for sines and cosines:__ For any angle value $\alpha \in R $:
$$sin^2\alpha + cos^2\alpha = 1$$
"""

A = np.linspace(0, np.pi / 2, 20)
B = np.full(shape=(20,), fill_value=1, dtype='float')

# Solution 1
np.allclose(np.sin(A) ** 2 + np.cos(A) ** 2, B)

# Solution 2
np.allclose(np.power(np.sin(A), 2) + np.power(np.cos(A), 2), B)

"""### Reminder
### Matrix mulitplication:
$${A} ={\begin{bmatrix}a_{11}&a_{12}&\cdots &a_{1n}\\a_{21}&a_{22}&\cdots &a_{2n}\\\vdots &\vdots &\ddots &\vdots \\a_{m1}&a_{m2}&\cdots &a_{mn}\\\end{bmatrix}}$$
A - $m\ x\ n$ matrix

$$ {B} ={\begin{bmatrix}b_{11}&b_{12}&\cdots &b_{1p}\\b_{21}&b_{22}&\cdots &b_{2p}\\\vdots &\vdots &\ddots &\vdots \\b_{n1}&b_{n2}&\cdots &b_{np}\\\end{bmatrix}}$$
B - $n\ x\ p$ matrix

$$C = AB$$
C - $ m \ x \ p $ matrix  
To be able to multiply two matrices, the number of columns in the left matrix must match the number of rows in the right matrix.
За да можете да умножите две матрици, броят на колоните в лявата матрица трябва да съвпада с броя на редовете в дясната матрица.

Matrix multiplication is not alternating! $$AB \neq BA$$
Матричното умножение не е редуващо се! $$AB \neq BA$$

### Example 1
$ X = \begin{bmatrix}5&3\\3&9\end{bmatrix}$, $ Y= \begin{bmatrix}1\\-1\end{bmatrix} $   
$ X - $ 2x2 matrix  
$ Y - $ 2x1 matrix  
$$Z = X \cdot Y = \begin{bmatrix}5&3\\3&9\end{bmatrix} \cdot \begin{bmatrix}1\\-1\end{bmatrix} = \begin{bmatrix}2\\-6\end{bmatrix}$$
$ Z - $ 2x1 matrix  

### Example 2
$X = \begin{bmatrix}2&-1&3\\3&1&0\end{bmatrix}$, $Y = \begin{bmatrix}2&1&-1\\0&-1&2\\3&2&0\end{bmatrix}$    
  
$X  -$ 2x3 matrix     
$Y - $ 3x3 matrix  
$$Z = X \cdot Y =  \begin{bmatrix}2&-1&3\\3&1&0\end{bmatrix} \cdot \begin{bmatrix}2&1&-1\\0&-1&2\\3&2&0\end{bmatrix} = \begin{bmatrix}13&9&-4\\6&2&-1\end{bmatrix}$$
$Z - $ 2x3 matrix

### <a name='5'></a> Exercise 65
Two two-dimensional arrays are provided, numpy $ A $ and $ B $.  
$ A $ - dimension matrix $ (3, 2) $  
$ B $ - dimension matrix $ (2, 3) $  
```
A = np.array([[2, 3],
              [-4, 2],
              [5, 0]])
B = np.array([[4, 3, 2],
              [-1, 0, 2]])
```
Perform matrix multiplication of $ A $ and $ B $ arrays.
Извършване на матрично умножение на $ A $ и $ B $ масиви.

__Tip:__ Use the _np.dot()_ function.
"""

A = np.array([[2, 3],
              [-4, 2],
              [5, 0]])
B = np.array([[4, 3, 2],
              [-1, 0, 2]])

print(A.shape)
print(B.shape)

# Solution 1
np.dot(A, B)

# Solution 2
A.dot(B)

"""### Reminder

### Determinant of the matrix:
Детерминанта на матрицата:

$${\displaystyle A={\begin{bmatrix}a_{11}&a_{12}&\dots &a_{1n}\\a_{21}&a_{22}&\dots &a_{2n}\\\vdots &\vdots &\ddots &\vdots \\a_{n1}&a_{n2}&\dots &a_{nn}\end{bmatrix}}}$$
$A$ - _nxn_ matrix

#### Signs:

${\displaystyle |A|=\left|{\begin{array}{c}a_{11}&a_{12}&\dots &a_{1n}\\a_{21}&a_{22}&\dots &a_{2n}\\\vdots &\vdots &\ddots &\vdots \\a_{n1}&a_{n2}&\dots &a_{nn}\end{array}}\right|} $  lub  $ {\displaystyle \det A=\det {\begin{bmatrix}a_{11}&a_{12}&\dots &a_{1n}\\a_{21}&a_{22}&\dots &a_{2n}\\\vdots &\vdots &\ddots &\vdots \\a_{n1}&a_{n2}&\dots &a_{nn}\end{bmatrix}}}$

#### Example:
${\displaystyle \det A={\begin{vmatrix}a_{11}&a_{12}\\a_{21}&a_{22}\end{vmatrix}}=a_{11}a_{22}-a_{12}a_{21}}$

${\displaystyle \det A={\begin{vmatrix}a_{11}&a_{12}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\end{vmatrix}}=a_{11}a_{22}a_{33}+a_{21}a_{32}a_{13}+a_{31}a_{12}a_{23}-a_{21}a_{12}a_{33}-a_{11}a_{32}a_{23}-a_{31}a_{22}a_{13}}$

${\displaystyle \det A={\begin{vmatrix}2&4\\-1&3\end{vmatrix}}=2\cdot3-4\cdot(-1)} = 6 + 4 = 10 $

### <a name='6'></a> Exercise 66
The following array (square matrix) $ A $ is given:
Даден е следният масив (квадратна матрица) $ A $:

```
A = np.array([[-2, 0, 4],
              [5, 2, -1],
              [-4, 2, 4]])
```
Compute the determinant of the $ A $ matrix.
Изчислете детерминантата на матрицата $ A $.

__Tip:__ Use the function _np.linalg.det()_.
"""

A = np.array([[-2, 0, 4],
              [5, 2, -1],
              [-4, 2, 4]])

np.linalg.det(A)

"""### <a name='7'></a> Exercise 67
The following array (square matrix) $ A $ is given:
Даден е следният масив (квадратна матрица) $ A $:

```
A = np.array([[5, 8, 16],
              [4, 1, 8],
              [-4, 4, -11]])
```
Calculate eigenvalues and their corresponding eigenvectors of the $ A $ matrix.
Изчислете собствените стойности и съответните им собствени вектори на матрицата $ A $.

__Tip:__ Use the function _np.linalg.eig()_.
"""

A = np.array([[5, 8, 16],
              [4, 1, 8],
              [-4, 4, -11]])

eigenvalues, eigenvectors = np.linalg.eig(A)
print(eigenvalues)
print(eigenvectors)

"""### Reminder
### Inverse matrix:
Обратна матрица:

$ A $ - square matrix of degree $ n $. The $ A $ matrix has an inverse matrix when there is a $ B $ matrix such as
$$ AB = BA = I $$

$A = \begin{bmatrix}2&4\\-1&3\end{bmatrix}$

### <a name='8'></a> Exercise 68
The following array (square matrix) $ A $ is given:
Даден е следният масив (квадратна матрица) $ A $:

```
A = np.array([[5, 8, 16],
              [4, 1, 8],
              [-4, 4, -11]])
```
Find the inverse matrix to the $ A $ matrix.
Намерете обратната матрица на $ A $ матрицата.

__Tip:__ Use the function _np.linalg.inv()_.
"""

A = np.array([[5, 8, 16],
              [4, 1, 8],
              [-4, 4, -11]])

np.linalg.inv(A)

"""### Reminder

### Matrix trace:
Следа на матрицата:

$${\displaystyle A={\begin{bmatrix}a_{11}&a_{12}&\dots &a_{1n}\\a_{21}&a_{22}&\dots &a_{2n}\\\vdots &\vdots &\ddots &\vdots \\a_{n1}&a_{n2}&\dots &a_{nn}\end{bmatrix}}}$$
$A$ - nxn matrix

${\displaystyle \operatorname {tr} (A)=\sum _{i=1}^{n}a_{ii}=a_{11}+a_{22}+\dots +a_{nn}}$


#### Example:
$A = \begin{bmatrix}2&4\\-1&3\end{bmatrix}$

${\displaystyle \operatorname {tr} (A)=\sum _{i=1}^{2}a_{ii}=a_{11}+a_{22} = 2 + 3 = 5}$

### <a name='9'></a> Exercise 69
The following array (square matrix) $ A $ is given:
Даден е следният масив (квадратна матрица) $ A $:
```
A = np.array([[5, 8, 16],
              [4, 1, 8],
              [-4, 4, -11]])
```
Find the trace of the square matrix $ A $ (sum of elements on the main diagonal).
Намерете следата на квадратната матрица $ A $ (сума от елементи на главния диагонал).

__Tip:__ Use the _np.trace()_ function.
"""

A = np.array([[5, 8, 16],
              [4, 1, 8],
              [-4, 4, -11]])

np.trace(A)

"""### Reminder
### Transposed matrix:
Транспонирана матрица:

Replace rows with columns and columns with rows.

#### Example 1:

$A = \begin{bmatrix}2&4\\-1&3\end{bmatrix}$,
$A^{T} = \begin{bmatrix}2&-1\\4&3\end{bmatrix}$

#### Example 2:
$A = \begin{bmatrix}2&1&-1\\0&-1&2\end{bmatrix}$,
$A^{T} = \begin{bmatrix}2&0\\1&-1\\-1&2\end{bmatrix}$

### Exercise 69 continued
Transpose the $ A $ matrix.
"""

# Solution 1
np.transpose(A)

# Solution 2
A.T

"""### <a name='10'> </a> Exercise 70
Two two-dimensional arrays numpy $ A $ and $ B $ are given:  
Дадени са два двумерни масива numpy $ A $ и $ B $:
$ A $ - matrix of $ (4, 2) $ dimension  
$ B $ - matrix of $ (1, 8) $ dimension

```
A = np.array([[2, 0],
              [4, 2],
              [5, 3],
              [4, 2]])
B = np.array([[4, 0, 2, 1, 1, 0, 2, 9]])
```
Transform the $ B $ array so that you can do the matrix multiplication of $ A \cdot B $. Perform this multiplication.
Трансформирайте масива $ B $, така че да можете да извършите матричното умножение на $ A \cdot B $. Изпълнете това умножение.

__Expected result:__
```
array([[ 8,  0,  4,  2],
       [18,  0, 12, 22],
       [23,  0, 16, 32],
       [18,  0, 12, 22]])
```
"""

A = np.array([[2, 0],
              [4, 2],
              [5, 3],
              [4, 2]])
B = np.array([[4, 0, 2, 1, 1, 0, 2, 9]])

print(A.shape)
print(B.shape)

# Solution 1 (without changing the original table B)
np.dot(A, B.reshape(2, -1))

# Solution 2 (with change)
B = B.reshape(2, -1)
np.dot(A, B)

