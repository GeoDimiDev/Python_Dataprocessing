# -*- coding: utf-8 -*-
"""081-090_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-W3OtnBkndEdpmYcTK8CCoWF_6ldZAn3

## Numpy

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 81](#1)
* [Exercise 82](#2)
* [Exercise 83](#3)
* [Exercise 84](#4)
* [Exercise 85](#5)
* [Exercise 86](#6)
* [Exercise 87](#7)
* [Exercise 88](#8)
* [Exercise 89](#9)
* [Exercise 90](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np

np.set_printoptions(linewidth=100)
np.__version__

"""### <a name='1'></a> Exercise 81
Generate all dates for mondays from January and February 2020 as a numpy array.
Генерирайте всички дати за понеделник от януари и февруари 2020 г. като масив numpy.

__Expected result:__
```
array(['2020-01-06', '2020-01-13', '2020-01-20', '2020-01-27', '2020-02-03', '2020-02-10',
       '2020-02-17', '2020-02-24'], dtype='datetime64[D]')
```
"""

np.arange('2020-01-06', '2020-03', dtype='datetime64[D]')[::7]

"""### <a name='2'></a> Exercise 82
Two $ A $ and $ B $ arrays are given:
Дадени са два масива $ A $ и $ B $:
```
A = np.array(['001', '002', '003'], dtype=np.str)
B = np.array(['XC', 'YC', 'ZC'], dtype=np.str)
```
Merge them together as shown below:
Слейте ги заедно, както е показано по-долу:

```
array(['001XC', '002YC', '003ZC'], dtype='<U5')
```

__Tip:__ Use the function _np.char.add()_.
"""

A = np.array(['001', '002', '003'], dtype=np.str)
B = np.array(['XC', 'YC', 'ZC'], dtype=np.str)

np.char.add(A, B)

"""### <a name='3'></a> Exercise 83
The array below is given:
Даден е масивът по-долу:

```
A = np.array(['1', '2', '3'], dtype=np.str)
```
Add '000' (3 zeros) to the beginning of each element of the array.
Добавете '000' (3 нули) към началото на всеки елемент от масива.

__Tip:__ Use the function _np.char.add()_ or _np.char.rjust()_ or _np.char.zfill()_.

"""

A = np.array(['1', '2', '3'], dtype=np.str)

# Solution 1
np.char.add('000', A)

# Solution 2
np.char.rjust(A, 4, fillchar='0')

# Solution 3
np.char.zfill(A, 4)

"""### <a name='4'></a> Exercise 84
The array below is given:
Даден е масивът по-долу:
```
A = np.array([['PLW CDR 11B TEN', 'AMC LPP'],
              ['CDR PKO KGH', 'CCC QMK']], dtype=np.str)
```
Split each element of the above array by spaces, obtaining a list of values in each place.
Разделете всеки елемент от горния масив с интервали, като получите списък със стойности на всяко място.

__Expected result:__
```
array([[list(['PLW', 'CDR', '11B', 'TEN']), list(['AMC', 'LPP'])],
       [list(['CDR', 'PKO', 'KGH']), list(['CCC', 'QMK'])]], dtype=object)
```
__Tip:__ Use the function _np.char.split()_.

"""

A = np.array([['PLW CDR 11B TEN', 'AMC LPP'],
              ['CDR PKO KGH', 'CCC QMK']], dtype=np.str)

np.char.split(A)

"""### <a name='5'></a> Exercise 85
The array below is given:
Даден е масивът по-долу:
```
A = np.array([['#summer#time#mood'],
              ['#sport#time']])
```
Replace all # with spaces and then remove any unnecessary spaces around the text.
Заменете всички # с интервали и след това премахнете всички ненужни интервали около текста.

__Expected result:__
```
array([['summer time mood'],
       ['sport time']], dtype='<U17')
```

"""

A = np.array([['#summer#time#mood'],
              ['#sport#time']])

np.char.strip(np.char.replace(A, '#', ' '))

"""### <a name='6'></a> Exercise 86
The following array is provided:
Предоставен е следният масив:

```
A = np.array([['#summer#time#mood', '#vibe'],
              ['#sport#time', '#good#time'],
              ['#event#summer', '#fast#move']])
```
Count the number of occurrences of the word 'time' in each element of the $ A $ array.
Пребройте броя на срещанията на думата „време“ във всеки елемент от масива $ A $.

__Tip:__ Use the _np.char.count()_ function.


"""

A = np.array([['#summer#time#mood', '#vibe'],
              ['#sport#time', '#good#time'],
              ['#event#summer', '#fast#move']])

np.char.count(A, 'time')

"""### <a name='7'></a> Exercise 87
The following text is provided containing data (companies from the WIG20 index):
Предоставен е следният текст, съдържащ данни (компании от индекса WIG20):

```
text = '''ALIOR	PLALIOR00045	88 860 000	1 386 216 000	0,891	2,16	14
CCC	PLCCC0000016	27 918 000	1 292 603 400	0,831	5,28	42
CDPROJEKT	PLOPTTC00011	67 348 000	22 864 646 000	14,702	7,39	7
CYFRPLSAT	PLCFRPT00013	275 301 000	6 854 994 900	4,408	1,17	14
DINOPL	PLDINPL00011	47 937 000	8 916 282 000	5,733	9,13	12
JSW	PLJSW0000015	52 636 000	716 902 320	0,461	1,51	24
KGHM	PLKGHM000017	136 410 000	9 881 540 400	6,354	4,78	8
LOTOS	PLLOTOS00025	86 543 000	5 609 717 260	3,607	2,91	16
LPP	PLLPP0000011	1 306 000	7 444 200 000	4,787	1,43	19
MBANK	PLBRE0000012	12 997 000	2 830 746 600	1,820	0,42	24
ORANGEPL	PLTLKPL00017	647 357 000	4 285 503 340	2,756	1,16	13
PEKAO	PLPEKAO00016	176 379 000	9 619 710 660	6,185	5,27	9
PGE	PLPGER000010	796 776 000	3 561 588 720	2,290	2,88	18
PGNIG	PLPGNIG00014	1 624 608 000	6 072 784 704	3,905	1,56	12
PKNORLEN	PLPKN0000018	289 049 000	17 701 360 760	11,382	12,44	8
PKOBP	PLPKO0000016	857 593 000	18 807 014 490	12,093	10,49	9
PLAY	LU1642887738	114 151 000	3 696 209 380	2,377	1,47	16
PZU	PLPZU0000011	568 305 000	17 515 160 100	11,262	6,64	6
SANPL	PLBZ00000044	33 207 000	5 213 499 000	3,352	1,91	18
TAURONPE	PLTAURN00011	1 043 590 000	1 252 308 000	0,805	1,21	33'''
```

__Columns mean \:__

Instrument | ISIN code | Package | Package (PLN) | Share in portfolio (%) | Share in trading shares and PDAs per session (%) | Average spread per session

Split text into lines. Then divide each line by the tab character `\t` and build a numpy array (without headers) containing the following data. Assign the resulting array to the _result_ variable.

Инструмент | ISIN код | Пакет | Пакет (PLN) | Дял в портфолиото (%) | Дял в търгуваните акции и PDA на сесия (%) | Среден спред на сесия

Разделете текста на редове. След това разделете всеки ред на знака за табулация `\t` и изградете numpy масив (без заглавки), съдържащ следните данни. Присвоете получения масив на променливата _result_.

__Expected result:__
```
array([['ALIOR', 'PLALIOR00045', '88 860 000', '1 386 216 000', '0,891', '2,16', '14'],
       ['CCC', 'PLCCC0000016', '27 918 000', '1 292 603 400', '0,831', '5,28', '42'],
       ['CDPROJEKT', 'PLOPTTC00011', '67 348 000', '22 864 646 000', '14,702', '7,39', '7'],
       ['CYFRPLSAT', 'PLCFRPT00013', '275 301 000', '6 854 994 900', '4,408', '1,17', '14'],
       ['DINOPL', 'PLDINPL00011', '47 937 000', '8 916 282 000', '5,733', '9,13', '12'],
       ['JSW', 'PLJSW0000015', '52 636 000', '716 902 320', '0,461', '1,51', '24'],
       ['KGHM', 'PLKGHM000017', '136 410 000', '9 881 540 400', '6,354', '4,78', '8'],
       ['LOTOS', 'PLLOTOS00025', '86 543 000', '5 609 717 260', '3,607', '2,91', '16'],
       ['LPP', 'PLLPP0000011', '1 306 000', '7 444 200 000', '4,787', '1,43', '19'],
       ['MBANK', 'PLBRE0000012', '12 997 000', '2 830 746 600', '1,820', '0,42', '24'],
       ['ORANGEPL', 'PLTLKPL00017', '647 357 000', '4 285 503 340', '2,756', '1,16', '13'],
       ['PEKAO', 'PLPEKAO00016', '176 379 000', '9 619 710 660', '6,185', '5,27', '9'],
       ['PGE', 'PLPGER000010', '796 776 000', '3 561 588 720', '2,290', '2,88', '18'],
       ['PGNIG', 'PLPGNIG00014', '1 624 608 000', '6 072 784 704', '3,905', '1,56', '12'],
       ['PKNORLEN', 'PLPKN0000018', '289 049 000', '17 701 360 760', '11,382', '12,44', '8'],
       ['PKOBP', 'PLPKO0000016', '857 593 000', '18 807 014 490', '12,093', '10,49', '9'],
       ['PLAY', 'LU1642887738', '114 151 000', '3 696 209 380', '2,377', '1,47', '16'],
       ['PZU', 'PLPZU0000011', '568 305 000', '17 515 160 100', '11,262', '6,64', '6'],
       ['SANPL', 'PLBZ00000044', '33 207 000', '5 213 499 000', '3,352', '1,91', '18'],
       ['TAURONPE', 'PLTAURN00011', '1 043 590 000', '1 252 308 000', '0,805', '1,21', '33']],
      dtype='<U14')
```

"""

text = """ALIOR	PLALIOR00045	88 860 000	1 386 216 000	0,891	2,16	14
CCC	PLCCC0000016	27 918 000	1 292 603 400	0,831	5,28	42
CDPROJEKT	PLOPTTC00011	67 348 000	22 864 646 000	14,702	7,39	7
CYFRPLSAT	PLCFRPT00013	275 301 000	6 854 994 900	4,408	1,17	14
DINOPL	PLDINPL00011	47 937 000	8 916 282 000	5,733	9,13	12
JSW	PLJSW0000015	52 636 000	716 902 320	0,461	1,51	24
KGHM	PLKGHM000017	136 410 000	9 881 540 400	6,354	4,78	8
LOTOS	PLLOTOS00025	86 543 000	5 609 717 260	3,607	2,91	16
LPP	PLLPP0000011	1 306 000	7 444 200 000	4,787	1,43	19
MBANK	PLBRE0000012	12 997 000	2 830 746 600	1,820	0,42	24
ORANGEPL	PLTLKPL00017	647 357 000	4 285 503 340	2,756	1,16	13
PEKAO	PLPEKAO00016	176 379 000	9 619 710 660	6,185	5,27	9
PGE	PLPGER000010	796 776 000	3 561 588 720	2,290	2,88	18
PGNIG	PLPGNIG00014	1 624 608 000	6 072 784 704	3,905	1,56	12
PKNORLEN	PLPKN0000018	289 049 000	17 701 360 760	11,382	12,44	8
PKOBP	PLPKO0000016	857 593 000	18 807 014 490	12,093	10,49	9
PLAY	LU1642887738	114 151 000	3 696 209 380	2,377	1,47	16
PZU	PLPZU0000011	568 305 000	17 515 160 100	11,262	6,64	6
SANPL	PLBZ00000044	33 207 000	5 213 499 000	3,352	1,91	18
TAURONPE	PLTAURN00011	1 043 590 000	1 252 308 000	0,805	1,21	33"""

lines = text.splitlines()
lines = [line.split('\t') for line in lines]
result = np.array(lines, dtype=np.str)
result

"""### <a name='8'></a> Exercise 88
From the _result_ array from the previous exercise, remove all spaces in the text and replace all commas with periods.
От масива _result_ от предишното упражнение премахнете всички интервали в текста и заменете всички запетаи с точки.
"""

result = np.char.replace(result, ' ', '')
result = np.char.replace(result, ',', '.')
result

"""Then extract column 'Share in portfolio (%)' convert its type to _float_ and calculate the sum for this column. Check if it's 100%."""
"""След това извлечете колона "Дял в портфолио (%)', преобразувайте нейния тип в _float_ и изчислете сумата за тази колона. Проверете дали е 100%."""

result[:, 4].astype(float).sum()

"""### <a name='9'></a> Exercise 89
From the _result_ array, extract all the rows with the company name beginning with the letter P and assign it to the variable _stocks_startswith_P_.
От масива _result_ извлечете всички редове с името на компанията, започващо с буквата P, и го присвоете на променливата _stocks_startswith_P_.

__Expected result:__

```
array([['PEKAO', 'PLPEKAO00016', '176379000', '9619710660', '6.185', '5.27', '9'],
       ['PGE', 'PLPGER000010', '796776000', '3561588720', '2.290', '2.88', '18'],
       ['PGNIG', 'PLPGNIG00014', '1624608000', '6072784704', '3.905', '1.56', '12'],
       ['PKNORLEN', 'PLPKN0000018', '289049000', '17701360760', '11.382', '12.44', '8'],
       ['PKOBP', 'PLPKO0000016', '857593000', '18807014490', '12.093', '10.49', '9'],
       ['PLAY', 'LU1642887738', '114151000', '3696209380', '2.377', '1.47', '16'],
       ['PZU', 'PLPZU0000011', '568305000', '17515160100', '11.262', '6.64', '6']], dtype='<U12')
```
"""

stocks_startswith_P = result[np.char.startswith(result[:, 0], 'P')]

"""### <a name='10'></a> Exercise 90
Using the variable _stocks_startswith_P_, calculate the total share of companies whose name begins with the letter P. Round the result to two decimal places.
Като използвате променливата _stocks_startswith_P_, изчислете общия дял на компаниите, чието име започва с буквата P. Закръглете резултата до два знака след десетичната запетая.
"""

np.round(stocks_startswith_P[:, 4].astype(float).sum(), 2)