# -*- coding: utf-8 -*-
"""111-120_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wy9GrIS0mtTGgPG30LxbR11LTYFhzwae

## Pandas

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 111](#1)
* [Exercise 112](#2)
* [Exercise 113](#3)
* [Exercise 114](#4)
* [Exercise 115](#5)
* [Exercise 116](#6)
* [Exercise 117](#7)
* [Exercise 118](#8)
* [Exercise 119](#9)
* [Exercise 120](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np
import pandas as pd

np.random.seed(42)
pd.__version__

"""### <a name='1'></a> Exercise 111
Build the _DatetimeIndex_ object containing the `yyyy-mm-dd` format dates for all days from January 2020 and assign it to the _date_range_ variable.
Създайте обекта _DatetimeIndex_, съдържащ датите във формат `yyyy-mm-dd` за всички дни от януари 2020 г. и го присвоете на променливата _date_range_.

__Expected result:__
```
DatetimeIndex(['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04',
               '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08',
               '2020-01-09', '2020-01-10', '2020-01-11', '2020-01-12',
               '2020-01-13', '2020-01-14', '2020-01-15', '2020-01-16',
               '2020-01-17', '2020-01-18', '2020-01-19', '2020-01-20',
               '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24',
               '2020-01-25', '2020-01-26', '2020-01-27', '2020-01-28',
               '2020-01-29', '2020-01-30', '2020-01-31'],
              dtype='datetime64[ns]', freq='D')
```
"""

# Solution 1
date_range = pd.date_range(start='2020-01-01', periods=31)
date_range

# Solution 2
date_range = pd.date_range(start='2020-01-01', end='2020-01-31')
date_range

"""Build the _Series_ object from the _date_range_ variable."""
"""Изградете обекта _Series_ от променливата _date_range_."""

pd.Series(date_range)

"""### <a name='2'></a> Exercise 112
Build the _DatetimeIndex_ object containing the dates in the `yyyy-mm-dd` format for all Mondays from 2020 and assign it to the _date_range_ variable.
Създайте обекта _DatetimeIndex_, съдържащ датите във формат `гггг-мм-дд` за всички понеделници от 2020 г. и го присвоете на променливата _date_range_.
"""

# Solution 1
date_range = pd.date_range(start='2020-01-01', periods=52, freq='W-MON')
date_range

# Solution 2
date_range = pd.date_range(start='2020-01-01', end='2020-12-31', freq='W-MON')
date_range

"""### <a name='3'></a> Exercise 113
Build the _DatetimeIndex_ object containing the dates in the format `yyyy-mm-dd hh: mm: ss` for January 1, 2021 with a time interval of 1h and assign to the variable _date_range_.
Създайте обекта _DatetimeIndex_, съдържащ датите във формат `гггг-мм-дд чч: мм: сс` за 1 януари 2021 г. с времеви интервал от 1 час и го присвоете на променливата _дата_диапазон_.

__Expected result:__
```
DatetimeIndex(['2021-01-01 00:00:00', '2021-01-01 01:00:00',
               '2021-01-01 02:00:00', '2021-01-01 03:00:00',
               '2021-01-01 04:00:00', '2021-01-01 05:00:00',
               '2021-01-01 06:00:00', '2021-01-01 07:00:00',
               '2021-01-01 08:00:00', '2021-01-01 09:00:00',
               '2021-01-01 10:00:00', '2021-01-01 11:00:00',
               '2021-01-01 12:00:00', '2021-01-01 13:00:00',
               '2021-01-01 14:00:00', '2021-01-01 15:00:00',
               '2021-01-01 16:00:00', '2021-01-01 17:00:00',
               '2021-01-01 18:00:00', '2021-01-01 19:00:00',
               '2021-01-01 20:00:00', '2021-01-01 21:00:00',
               '2021-01-01 22:00:00', '2021-01-01 23:00:00'],
              dtype='datetime64[ns]', freq='H')
```
"""

# Solution 1
date_range = pd.date_range(start='2021-01-01', periods=24, freq='H')
date_range

# Solution 2
date_range = pd.date_range(start='2021-01-01', end='2021-01-02', freq='H', closed='left')
date_range

"""### <a name='4'></a> Exercise 114
Build the _DataFrame_ object below.
Създайте обекта _DataFrame_ по-долу.

__Tips:__ The _day_ column contains dates from March 1, 2021 to March 31, 2021. The column _day_of_year_ is the day number of the whole year.
__Съвети:__ Колоната _day_ съдържа дати от 1 март 2021 г. до 31 март 2021 г. Колоната _day_of_year_ е номерът на деня от цялата година.

```
      day	       day_of_year
 0	2021-03-01	60
 1	2021-03-02	61
 2	2021-03-03	62
 3	2021-03-04	63
 4	2021-03-05	64
 5	2021-03-06	65
 6	2021-03-07	66
 7	2021-03-08	67
 8	2021-03-09	68
 9	2021-03-10	69
10	2021-03-11	70
11	2021-03-12	71
12	2021-03-13	72
13	2021-03-14	73
14	2021-03-15	74
15	2021-03-16	75
16	2021-03-17	76
17	2021-03-18	77
18	2021-03-19	78
19	2021-03-20	79
20	2021-03-21	80
21	2021-03-22	81
22	2021-03-23	82
23	2021-03-24	83
24	2021-03-25	84
25	2021-03-26	85
26	2021-03-27	86
27	2021-03-28	87
28	2021-03-29	88
29	2021-03-30	89
30	2021-03-31	90
```
"""

date_range = pd.date_range(start='2021-03-01', periods=31)
df = pd.DataFrame(data=date_range, columns=['day'])
df['day_of_year'] = df['day'].dt.dayofyear
df

"""### <a name='5'></a> Exercise 115

The following _data_dict_ dictionary is given.
Даден е следният речник _data_dict_.

```
data_dict = {
    'normal': np.random.normal(loc=0, scale=1, size=1000),
    'uniform': np.random.uniform(low=0, high=1, size=1000),
    'binomial': np.random.binomial(n=1, p=0.2, size=1000)
}
```
Build the _DateFrame_ object from this dictionary. Additionally, as an index, add a date from 01/01/2020 and assign it to the _df_ variable.
Създайте обекта _DateFrame_ от този речник. Освен това, като индекс, добавете дата от 01/01/2020 и я присвоете на променливата _df_.

"""

data_dict = {
    'normal': np.random.normal(loc=0, scale=1, size=1000),
    'uniform': np.random.uniform(low=0, high=1, size=1000),
    'binomial': np.random.binomial(n=1, p=0.2, size=1000)
}

df = pd.DataFrame(data=data_dict, index=pd.date_range('2020-01-01', periods=1000))
df

"""### <a name='6'></a> Exercise 116
Display the first 10 rows of the _df_ object from the previous exercise.
Покажете първите 10 реда на _df_ обекта от предишното упражнение.
"""

df.head(10)

"""Display the last 8 rows of the df object from the previous exercise."""
"""Показване на последните 8 реда на df обекта от предишното упражнение."""

df.tail(8)

"""### <a name='7'></a> Exercise 117
Display basic information about the _df_ object (number of rows, number of columns, type of variables).
Показване на основна информация за _df_ обекта (брой редове, брой колони, тип на променливите).
"""

df.info()

"""Display basic statistics of _df_ (mean value, deviation, min, max, median)."""
"""Показва основни статистически данни за _df_ (средна стойност, отклонение, мин., макс., медиана)."""

df.describe()

"""### <a name='8'></a> Exercise 118
Import the _seaborn_ library for data visualization.
Импортирайте библиотеката _seaborn_ за визуализация на данни.
"""

import seaborn as sns

sns.set()

"""Using the _pd.DataFrame.plot_ method, build histograms for the next three variables.
* normal (20 bins)
"""
"""Използвайки метода _pd.DataFrame.plot_, изградете хистограми за следващите три променливи.
* нормален (20 контейнера)
"""

df['normal'].plot(kind='hist', bins=20)

"""* uniform (30 bins)"""

df['uniform'].plot(kind='hist', bins=30)

"""* binomial"""

df['binomial'].plot(kind='hist')

"""### <a name='9'></a> Exercise 119
Save the _df_ object to the _'dataframe.csv'_ file.
Запишете _df_ обекта във файла _'dataframe.csv'_.
"""

df.to_csv('dataframe.csv', sep=',')

"""Check the solution"""
"""Проверете решението"""

!head -5 dataframe.csv

"""### <a name='10'></a> Exercise 120
Load the _dataframe.csv_ file into the _df_new_ variable (remember to load the index correctly).
Заредете файла _dataframe.csv_ в променливата _df_new_ (не забравяйте да заредите индекса правилно).
"""

df_new = pd.read_csv('dataframe.csv', index_col=0)
df_new

