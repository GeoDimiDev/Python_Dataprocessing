# -*- coding: utf-8 -*-
"""181-190_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKVHcGqms-jUww-0DbsKdJnJ89oL_TUw

## Pandas

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 181](#1)
* [Exercise 182](#2)
* [Exercise 183](#3)
* [Exercise 184](#4)
* [Exercise 185](#5)
* [Exercise 186](#6)
* [Exercise 187](#7)
* [Exercise 188](#8)
* [Exercise 189](#9)
* [Exercise 190](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np
import pandas as pd
import plotly.express as px

np.__version__

"""Run the following instructions to download the _insurance.csv_ file to your working directory."""
"""Изпълнете следните инструкции, за да изтеглите файла _insurance.csv_ във вашата работна директория."""

!wget -q https://storage.googleapis.com/esmartdata-courses-files/ml-course/insurance.csv

"""### <a name='1'></a> Exercise 181
Load the _insurance.csv_ file into the DataFrame object _df_raw_ and display the first few rows.
Заредете файла _insurance.csv_ в обекта DataFrame _df_raw_ и покажете първите няколко реда.
"""

df_raw = pd.read_csv('insurance.csv')
df_raw.head()

"""Copy the _df_raw_ object to the _df_ variable and display basic information about the _df_ object."""
"""Копирайте обекта _df_raw_ в променливата _df_ и покажете основна информация за обекта _df_."""

df = df_raw.copy()
df.info()

"""### <a name='2'></a> Exercise 182
Check if there are duplicate rows in the _df_ object. If so, display these rows.
Проверете дали има дублиращи се редове в обекта _df_. Ако е така, покажете тези редове.
"""

df[df.duplicated()]

"""Delete duplicates in object _df_."""
"""Изтриване на дубликати в обект _df_."""

df = df.drop_duplicates()
df.info()

"""### <a name='3'></a> Exercise 183
Display variables from the object _df_ with the type _object_.
Показване на променливи от обекта _df_ с тип _object_.

__Tip:__ Use the _pd.DataFrame.select_dtypes()_ method.
"""

df.select_dtypes(include=['object'])

"""Convert these variables to categorical variables.
Преобразувайте тези променливи в категорични променливи.

__Tip:__ Use the _pd.DataFrame.astype()_ method.
"""

for col in list(df.select_dtypes(include=['object']).columns):
    df[col] = df[col].astype('category')

df.info()

"""Display numeric variables (_float_, _int_) from the object _df_.
Показване на числови променливи (_float_, _int_) от обекта _df_.

__Tip:__ Use the _pd.DataFrame.select_dtypes()_ method
"""

df.select_dtypes(include=['float', 'int'])

"""Find the names of numeric variables (_float_, _int_) from the object _df_."""
"""Намерете имената на числови променливи (_float_, _int_) от обекта _df_."""

list(df.select_dtypes(include=['float', 'int']).columns)

"""### <a name='4'></a> Exercise 184
Follow the steps below:

* assign to the variable _df_cat_ categorical variables from the object _df_ and create a copy of them.

* assign to the variable _df_num_ numerical variables from the object _df_ and create a copy of them.

Следвайте стъпките по-долу:

* присвояване на променливата _df_cat_ категорични променливи от обекта _df_ и създаване на тяхно копие.

* присвоете на променливата _df_num_ числови променливи от обекта _df_ и създайте копие от тях.
"""

df_cat = df.select_dtypes(include=['category']).copy()
df_num = df.select_dtypes(include=['float', 'int']).copy()

"""Display the first 5 rows of the _df_cat_ object."""
"""Показване на първите 5 реда от обекта _df_cat_."""

df_cat.head()

"""Display the first 5 rows of _df_num_."""
"""Показване на първите 5 реда от _df_num_."""

df_num.head()

"""### <a name='5'></a> Exercise 185
Display basic statistics of the _df_cat_ object.
Показване на основни статистики на обекта _df_cat_.
"""

df_cat.describe()

"""Display basic statistics of the object _df_num_."""
"""Показва основна статистика на обекта _df_num_."""

df_num.describe()

"""Display basic statistics of the _df_ object for numeric variables and transpose the resulting _DataFrame_ object."""
"""Показва основна статистика на _df_ обекта за числови променливи и транспонира получения _DataFrame_ обект."""

df.describe().T

"""Display basic statistics of the _df_ object for numeric variables, transpose the resulting _DataFrame_ object and extract the two columns _mean_ and _std_."""
"""Показва основни статистики на _df_ обекта за числови променливи, транспонира резултантния _DataFrame_ обект и извлича двете колони _mean_ и _std_."""

df.describe().T[['mean', 'std']]

"""Display basic statistics of the _df_ object for categorical variables and transpose the resulting _DataFrame_ object."""
"""Показва основни статистики на _df_ обекта за категориални променливи и транспонира получения _DataFrame_ обект."""

df.describe(include='category').T

"""Check if any data is missing from the _df_ object."""
"""Проверете дали липсват данни от _df_ обекта."""

df.isnull().sum()

"""### <a name='6'></a> Exercise 186
Using the _plotly express_ library, build the histogram of the _charges_ variable.
Използвайки библиотеката _plotly express_, изградете хистограмата на променливата _charges_.

Use the _px.histogram()_ function with the following parameters:
Използвайте функцията _px.histogram()_ със следните параметри:
* width = 800
* height = 400
* nbins = 50
* facet_col = 'smoker'
* facet_row = 'sex'

"""

px.histogram(df, x='charges', width=800, height=400, nbins=50, facet_col='smoker', facet_row='sex')

"""Using the _plotly express_ library, find the distribution of the _smoker_ variable.
Използвайки библиотеката _plotly express_, намерете разпределението на променливата _smoker_.

Use the _px.histogram()_ function with the following parameters:
Използвайте функцията _px.histogram()_ със следните параметри:
* width = 800
* height = 400
* facet_col = 'sex'
* color = 'sex'
"""

px.histogram(df, x='smoker', width=800, height=400, facet_col='sex', color='sex')

"""### <a name='7'></a> Exercise 187
Convert categorical variables of the _df_ object to 0-1 encoding and assign it to the _df_dummies_ variable.  
Преобразувайте категориалните променливи на обекта _df_ в кодиране 0-1 и го присвоете на променливата _df_dummies_.

__Tip:__ Use the _pd.get_dummies()_ function with the `drop_first = True` parameter.
"""

df_dummies = pd.get_dummies(df, drop_first=True)
df_dummies

"""### <a name='8'></a> Exercise 188
Determine the correlations of variables in the _df_dummies_ object and assign it to the _corr_ variable.
Определете корелациите на променливите в обекта _df_dummies_ и го присвоете на променливата _corr_.
"""

corr = df_dummies.corr()
corr

"""Extract the column from the _corr_ object for the _charges_ variable (as a DataFrame object) and sort the values in descending order."""
"""Извлечете колоната от обекта _corr_ за променливата _charges_ (като обект DataFrame) и сортирайте стойностите в низходящ ред."""

corr[['charges']].sort_values(by='charges', ascending=False)

"""Using the _plotly express_ library, create a bar chart for such sorted values. Skip the first element of the object."""
"""Използвайки библиотеката _plotly express_, създайте лентова диаграма за такива сортирани стойности. Пропуснете първия елемент на обекта."""

tmp = corr[['charges']].sort_values(by='charges', ascending=False).reset_index()[1:]
tmp.columns = ['variable', 'value']
tmp

px.bar(tmp, x='variable', y='value', width=900)

"""### <a name='9'></a> Exercise 189
Copy the _df_dummies_ object to the _data_ variable. Then pop the _charges_ column from this object and assign it to the _target_ variable.
Копирайте обекта _df_dummies_ в променливата _data_. След това извадете колоната _charges_ от този обект и я присвоете на променливата _target_.
"""

data = df_dummies.copy()
target = data.pop('charges')

"""Display the first 5 rows of _data_. Make sure the _charges_ column is not in it."""
"""Покажете първите 5 реда от _данни_. Уверете се, че колоната _charges_ не е в нея."""

data.head()

"""Display the first 5 rows of _target_."""
"""Показване на първите 5 реда от _target_."""

target.head()

"""### <a name='10'></a> Exercise 190
Using the _scikit-learn_ library and the _train_test_split_ function, divide the data from the _data_ and _target_ objects into a training set (_X\_train_, _y\_train_) and a test set (_X\_test_, _y\_test_). Assign 20% of the samples to the test set.
Използвайки библиотеката _scikit-learn_ и функцията _train_test_split_, разделете данните от обектите _data_ и _target_ на набор за обучение (_X\_train_, _y\_train_) и тестов набор (_X\_test_, _y\_test_). Присвоете 20% от пробите към тестовия комплект.

Display object size:
* _X\_train_
* _X\_test_
* _y\_train_
* _y\_test_
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2)

print(f'X_trian shape: {X_train.shape}')
print(f'X_test shape: {X_test.shape}')
print(f'y_trian shape: {y_train.shape}')
print(f'y_test shape: {y_test.shape}')

"""Save objects:
* _X\_train_
* _X\_test_
* _y\_train_
* _y\_test_  

to csv files with the appropriate name:
* X_train.csv
* X_test.csv
* y_train.csv
* y_test.csv

"""

fnames = ['X_train.csv', 'X_test.csv', 'y_train.csv', 'y_test.csv']
dfs = [X_train, X_test, y_train, y_test]

for fname, df in zip(fnames, dfs):
    df.to_csv(fname)

"""Run the cell below to check."""
"""Изпълнете клетката по-долу, за да проверите."""

!head -5 X_test.csv
!head -5 X_train.csv
!head -5 y_train.csv
!head -5 y_test.csv

