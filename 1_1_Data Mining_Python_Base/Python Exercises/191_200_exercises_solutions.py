# -*- coding: utf-8 -*-
"""191-200_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lICAYFfKxP5usGm663D9KbtICtjz5wdi

## Pandas

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 191](#1)
* [Exercise 192](#2)
* [Exercise 193](#3)
* [Exercise 194](#4)
* [Exercise 195](#5)
* [Exercise 196](#6)
* [Exercise 197](#7)
* [Exercise 198](#8)
* [Exercise 199](#9)
* [Exercise 200](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np
import pandas as pd

np.__version__

"""### <a name='1'></a> Exercise 191
Create the _DataFrame_ object from the _data_ dictionary below and assign it to the _df_ variable.
Създайте обекта _DataFrame_ от речника _data_ по-долу и го присвоете на променливата _df_.

```
data = {
    'size': ['XL', 'L', 'M', 'L', 'M'],
    'color': ['red', 'green', 'blue', 'green', 'red'],
    'gender': ['female', 'male', 'male', 'female', 'female'],
    'price': [199.0, 89.0, 99.0, 129.0, 79.0],
    'weight': [500, 450, 300, 380, 410],
    'bought': ['yes', 'no', 'yes', 'no', 'yes']
}
```
"""

data = {
    'size': ['XL', 'L', 'M', 'L', 'M'],
    'color': ['red', 'green', 'blue', 'green', 'red'],
    'gender': ['female', 'male', 'male', 'female', 'female'],
    'price': [199.0, 89.0, 99.0, 129.0, 79.0],
    'weight': [500, 450, 300, 380, 410],
    'bought': ['yes', 'no', 'yes', 'no', 'yes']
}

df = pd.DataFrame(data)
df

"""Display basic information about the object _df_."""
"""Показва основна информация за обекта _df_."""

df.info()

"""Convert variables to types:
* size -> _category_
* color -> _category_
* gender -> _category_
* weight -> _float_
* bought -> _category_
"""

for col in ['size', 'color', 'gender', 'bought']:
    df[col] = df[col].astype('category')

df['weight'] = df['weight'].astype('float')
df.info()

"""### <a name='2'></a> Exercise 192
Use the _scikit-learn_ machine learning library and the _LabelEncoder_ class to code 0-1 of the _bought_ variable. Assign changes to the _df_ object permanently and display the object.
Използвайте библиотеката за машинно обучение _scikit-learn_ и класа _LabelEncoder_, за да кодирате 0-1 на променливата _bought_. Присвояване на промени на обекта _df_ за постоянно и показване на обекта.
"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df['bought'] = le.fit_transform(df['bought'])
df

"""Use the appropriate method of the _LabelEncoder_ class to restore the original values of the _bought_ variable. Note the type of the _bought_ variable."""
"""Използвайте подходящия метод на класа _LabelEncoder_, за да възстановите оригиналните стойности на променливата _bought_. Обърнете внимание на типа на променливата _bought_."""

df['bought'] = le.inverse_transform(df['bought'])
df['bought'] = df['bought'].astype('category')
df

df.info()

"""### <a name='3'></a> Exercise 193
Using the machine learning library _scikit-learn_ and the _OneHotEncoder_ class, encode 0-1 of the _size_ variable. Don't assign changes to the _df_ object.

Use the `sparse = False` parameter of the _OneHotEncoder_ class.

Като използвате библиотеката за машинно обучение _scikit-learn_ и класа _OneHotEncoder_, кодирайте 0-1 от променливата _size_. Не присвоявайте промени на обекта _df_.

Използвайте параметъра `sparse = False` на класа _OneHotEncoder_.
"""

from sklearn.preprocessing import OneHotEncoder

encoder = OneHotEncoder(sparse=False)
encoder.fit_transform(df[['size']])

"""Using the machine learning library _scikit-learn_ and the _OneHotEncoder_ class, encode 0-1 of the _size_ variable. Don't assign changes to the _df_ object.

Use the parameter `sparse = False` and `drop = first` of the _OneHotEncoder_ class.

Като използвате библиотеката за машинно обучение _scikit-learn_ и класа _OneHotEncoder_, кодирайте 0-1 от променливата _size_. Не присвоявайте промени на обекта _df_.

Използвайте параметъра `sparse = False` и `drop = first` на класа _OneHotEncoder_.
"""

encoder = OneHotEncoder(sparse=False, drop='first')
encoder.fit_transform(df[['size']])

"""### <a name='4'></a> Exercise 194
Using the _pandas_ library and the _get_dummies()_ function, present all categorical variables of the _df_ object in the form of 0-1 encoding. Don't assign changes permanently to the _df_ object.
Като използвате библиотеката _pandas_ и функцията _get_dummies()_, представете всички категорични променливи на обекта _df_ под формата на кодиране 0-1. Не присвоявайте промени за постоянно на обекта _df_.
"""

pd.get_dummies(df)

"""Using the _pandas_ library and the _get_dummies()_ function, present all categorical variables of the _df_ object in the form of 0-1 encoding. Use the `drop_first = True` parameter. Don't assign changes permanently to the _df_ object."""
"""Използвайки библиотеката _pandas_ и функцията _get_dummies()_, представете всички категорични променливи на _df_ обекта под формата на кодиране 0-1. Използвайте параметъра `drop_first = True`. Не присвоявайте промени за постоянно на _df_ обект."""

pd.get_dummies(df, drop_first=True)

"""Using the _pandas_ library and the _get_dummies()_ function, present the _size_ variable of the _df_ object in the form of 0-1 encoding. Use the `drop_first = True` parameter. Don't assign changes permanently to the _df_ object."""
"""Използвайки библиотеката _pandas_ и функцията _get_dummies()_, представете променливата _size_ на _df_ обекта под формата на кодиране 0-1. Използвайте параметъра `drop_first = True`. Не присвоявайте промени за постоянно на _df_ обект."""

pd.get_dummies(df, columns=['size'], drop_first=True)

"""### <a name='5'></a> Exercise 195
Use the _scikit-learn_ machine learning library and the _StandardScaler_ class to scale the _weight_ variable. Don't assign changes to the _df_ object.
Използвайте библиотеката за машинно обучение _scikit-learn_ и класа _StandardScaler_, за да мащабирате променливата _weight_. Не присвоявайте промени на обекта _df_.
"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit_transform(df[['weight']])

"""### <a name='6'></a> Exercise 196
Load the _data_ dictionary again into the _DataFrame_ object named _df_.
Заредете отново речника _data_ в обекта _DataFrame_ с име _df_.
"""

df = pd.DataFrame(data)
df

"""Prepare the data for the machine learning model:
* using the LabelEncoder class, encode 0-1 of the _bought_ variable
* standardize the variables _weight_ and _price_
* encode 0-1 categorical variables using the function _get_dummies()._

Assign changes to the _df_prep_ variable.

Подгответе данните за модела на машинно обучение:
* използвайки класа LabelEncoder, кодирайте 0-1 от променливата _bought_
* стандартизирайте променливите _weight_ и _price_
* кодирайте 0-1 категорични променливи с помощта на функцията _get_dummies()._

Присвояване на промени на променливата _df_prep_.
"""

df_prep = df.copy()

encoder = LabelEncoder()
df_prep['bought'] = encoder.fit_transform(df_prep['bought'])

scaler = StandardScaler()
df_prep[['price', 'weight']] = scaler.fit_transform(df_prep[['price', 'weight']])

df_prep = pd.get_dummies(df_prep, drop_first=True)
df_prep

"""### <a name='7'></a> Exercise 197
Copy the _df_prep_ object to the _data_ variable. Then pop the _bought_ column from this object and assign it to the _target_ variable.
Копирайте обекта _df_prep_ в променливата _data_. След това извадете колоната _bought_ от този обект и я присвоете на променливата _target_.
"""

data = df_prep.copy()
target = data.pop('bought')

"""Display the first 5 rows of _data_. Make sure the _bought_ column is not in it."""
"""Покажете първите 5 реда от _данни_. Уверете се, че колоната _купено_ не е в нея."""

data.head()

"""Display the first 5 rows of _target_."""
"""Показване на първите 5 реда от _target_."""

target.head()

"""### <a name='8'></a> Exercise 198
Using the _scikit-learn_ library and the _train_test_split_ function, divide the data from the _data_ and _target_ objects into a training set (_X\_train_, _y\_train_) and a test set (_X\_test_, _y\_test_). Assign 20% of the samples to the test set.
Използвайки библиотеката _scikit-learn_ и функцията _train_test_split_, разделете данните от обектите _data_ и _target_ на набор за обучение (_X\_train_, _y\_train_) и тестов набор (_X\_test_, _y\_test_). Присвоете 20% от пробите към тестовия комплект.

Display object size:
* _X\_train_
* _X\_test_
* _y\_train_
* _y\_test_
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2)

print(f'X_trian shape: {X_train.shape}')
print(f'X_test shape: {X_test.shape}')
print(f'y_trian shape: {y_train.shape}')
print(f'y_test shape: {y_test.shape}')

"""### <a name='9'></a> Exercise 199
Combine _X\_train_ and _X\_test_ objects into one _DataFrame_ object named _X_.
Комбинирайте обекти _X\_train_ и _X\_test_ в един обект _DataFrame_ с име _X_.
"""

X = pd.concat([X_train, X_test])
X

"""### <a name='10'></a> Exercise 200
Combine the _y\_train_ and _y\_test_ objects into one _DataFrame_ object named _y_.
Комбинирайте обектите _y\_train_ и _y\_test_ в един обект _DataFrame_ с име _y_.
"""

y = pd.concat([y_train, y_test])
y

"""Combine _X_ and _y_ objects into one _DataFrame_ object."""
"""Комбинирайте _X_ и _y_ обекти в един _DataFrame_ обект."""

pd.concat([X, y], axis=1)

