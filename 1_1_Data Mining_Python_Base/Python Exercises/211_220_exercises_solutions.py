# -*- coding: utf-8 -*-
"""211-220_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U4xBekl3Z7ybNJZMsi2RgzkNmLuf76Rm

## Data Science Bootcamp

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 211](#1)
* [Exercise 212](#2)
* [Exercise 213](#3)
* [Exercise 214](#4)
* [Exercise 215](#5)
* [Exercise 216](#6)
* [Exercise 217](#7)
* [Exercise 218](#8)
* [Exercise 219](#9)
* [Exercise 220](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np
import pandas as pd

np.__version__

"""### <a name='1'></a> Exercise 211
The following _DataFrame_ object is given:
Даден е следният обект _DataFrame_:

```
df = pd.DataFrame(data={'height': [175., 178.5, 185., 191., 184.5, 183., 168.]})
```
Discretize the _height_ variable into 3 intervals of equal width. Assign the result to the new column _height_cut_.
Дискретизирайте променливата _height_ в 3 интервала с еднаква ширина. Присвоете резултата на новата колона _height_cut_.


"""

df = pd.DataFrame(data={'height': [175., 178.5, 185., 191., 184.5, 183., 168.]})

df['height_cut'] = pd.cut(df['height'], bins=3)
df

"""### <a name='2'></a> Exercise 212
Discretize the _height_ variable into 3 intervals of the given form:
Дискретизирайте променливата _height_ в 3 интервала от дадената форма:
* (160, 175]
* (175, 180]
* (180, 195]

Assign the result to the new column _height_cut_2_.
Присвоете резултата на новата колона _height_cut_2_.
"""

df['height_cut_2'] = pd.cut(df['height'], bins=(160, 175, 180, 195))
df

"""### <a name='3'></a> Exercise 213
Discretize the _height_ variable into 3 intervals of the given form:
Дискретизирайте променливата _height_ в 3 интервала от дадената форма:
* (160, 175]
* (175, 180]
* (180, 195]

and assign them the following labels:
и им присвоете следните етикети:

* small
* medium
* high

Assign the result to the new column _height_cut_3_.
Присвоете резултата на новата колона _height_cut_3_.
"""

df['height_cut_3'] = pd.cut(df['height'], bins=(160, 175, 180, 195), labels=['small', 'medium', 'high'])
df

"""### <a name='4'></a> Exercise 214
Remove the _height_cut_ and _height_cut_2_ columns from the _df_ object.
Премахнете колоните _height_cut_ и _height_cut_2_ от обекта _df_.
"""

df = df.drop(columns=['height_cut', 'height_cut_2'], axis=1)
df

"""Rename the _height_cut_3_ column to _height_level_."""
"""Преименувайте колоната _height_cut_3_ на _height_level_."""

df = df.rename(columns={'height_cut_3': 'height_level'})
df

"""### <a name='5'></a> Exercise 215
Get 0-1 encoding on _df_ with the _pd.get_dummies()_ function.
Вземете 0-1 кодиране на _df_ с функцията _pd.get_dummies()_.
"""

pd.get_dummies(df)

"""### <a name='6'></a> Exercise 216
The following _df_ object is given:
Даден е следният _df_ обект:

```
df = pd.DataFrame(data={'lang': [['PL', 'ENG'], ['GER', 'ENG', 'PL', 'FRA'], ['RUS']]})
```
Build a new column called _length_ that will take the length of the _lang_ column list.
Създайте нова колона, наречена _length_, която ще вземе дължината на списъка с колони _lang_.

"""

df = pd.DataFrame(data={'lang': [['PL', 'ENG'], ['GER', 'ENG', 'PL', 'FRA'], ['RUS']]})

df['length'] = df['lang'].apply(len)
df

"""### <a name='7'></a> Exercise 217
Build a new column called _PL_flag_, which will be set to 1 when the language 'PL' is in the list in the _lang_ column, on the contrary 0.
Създайте нова колона, наречена _PL_flag_, която ще бъде зададена на 1, когато езикът 'PL' е в списъка в колоната _lang_, напротив, 0.
"""

df['PL_flag'] = df['lang'].apply(lambda item: 1 if 'PL' in item else 0)
df

"""### <a name='8'></a> Exercise 218
The following _df_ object is given:
Даден е следният _df_ обект:

```
df = pd.DataFrame(data={'website': ['wp.pl', 'onet.pl', 'google.com']})
```
Split the _website_ column by dot into two columns named _portal_ and _ending_.
Разделете колоната _website_ по точка на две колони, наречени _portal_ и _ending_.

"""

df = pd.DataFrame(data={'website': ['wp.pl', 'onet.pl', 'google.com']})

df = df['website'].str.split('.', expand=True)
df.columns = ['portal', 'ending']
df

"""### <a name='9'></a> Exercise 219
Extract all rows of the _df_ object for which the _portal_ column contains the letter 'o'.
Извлечете всички редове от обекта _df_, за които колоната _portal_ съдържа буквата 'o'.
"""

df[df['portal'].str.contains('o')]

"""### <a name='10'></a> Exercise 220
Replace all _com_ extensions from the _ending_ column with _org_.
Заменете всички _ com_ разширения от _крайната _ колона с _org _.
"""

df['ending'] = df['ending'].str.replace('com', 'org')
df

