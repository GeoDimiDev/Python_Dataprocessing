# -*- coding: utf-8 -*-
"""221-230_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bl3-qzoFALMJkbA_-ropc1UYAiBeXJkS

## Data Science Bootcamp

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 221](#1)
* [Exercise 222](#2)
* [Exercise 223](#3)
* [Exercise 224](#4)
* [Exercise 225](#5)
* [Exercise 226](#6)
* [Exercise 227](#7)
* [Exercise 228](#8)
* [Exercise 229](#9)
* [Exercise 230](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np
np.random.seed(20)

np.__version__

"""### Solving systems of equations
Let's consider the system of equations $U$:  
$${\displaystyle \mathrm {U} \colon {\begin{cases}{\begin{matrix}a_{11}x_{1}&+&a_{12}x_{2}&+&\dots &+&a_{1n}x_{n}&=b_{1},\\a_{21}x_{1}&+&a_{22}x_{2}&+&\dots &+&a_{2n}x_{n}&=b_{2},\\\vdots &&\vdots &&\ddots &&\vdots &\vdots \\a_{m1}x_{1}&+&a_{m2}x_{2}&+&\dots &+&a_{mn}x_{n}&=b_{m}.\end{matrix}}\end{cases}}.}$$

Using matrices we can present it as follows:
С помощта на матрици можем да го представим по следния начин:

$${\begin{bmatrix}a_{11}&a_{12}&\dots &a_{1n}\\a_{21}&a_{22}&\dots &a_{2n}\\\vdots &\vdots &\ddots &\vdots \\a_{m1}&a_{m2}&\dots &a_{mn}\end{bmatrix}}{\begin{bmatrix}x_{1}\\x_{2}\\\vdots \\x_{n}\end{bmatrix}}={\begin{bmatrix}b_{1}\\b_{2}\\\vdots \\b_{m}\end{bmatrix}}$$
And in the summary:
$$\mathbf {AX} =\mathbf {B}$$

Where:   
$A = {\begin{bmatrix}a_{11}&a_{12}&\dots &a_{1n}\\a_{21}&a_{22}&\dots &a_{2n}\\\vdots &\vdots &\ddots &\vdots \\a_{m1}&a_{m2}&\dots &a_{mn}\end{bmatrix}}$ - coefficient matrix

${\displaystyle \mathbf {B} =[b_{1},b_{2},\dots ,b_{m}]} $ - vector  
${\mathbf  X}=[x_{1},x_{2},\dots ,x_{n}] $ - vector  

If the system matrix $ A $ is a square matrix, then the determinate of the system is equivalent to its reversibility, i.e.
Ако системната матрица $ A $ е квадратна матрица, тогава детерминантата на системата е еквивалентна на нейната обратимост, т.е
$$\mathbf {AX} =\mathbf {B}$$
$${\displaystyle \mathbf {A} ^{-1}\mathbf {AX} =\mathbf {A} ^{-1}\mathbf {B}} $$
$$\mathbf {X} =\mathbf {A} ^{-1}\mathbf {B} .$$

#### Example:
Let's consider the system of equations:
Нека разгледаме системата от уравнения:
$$\begin{cases}2x + 4y = 10 \\ x - y = -1 \end{cases}$$  
The solution is a pair of numbers:
$$\begin{cases}x = 1 \\ y = 2 \end{cases}$$

### <a name='1'></a> Exercise 221
Solve the following system of equations using the numpy library:
Решете следната система от уравнения с помощта на библиотеката numpy:
$$\begin{cases}5x - 3y = 21 \\ x - 2y = 7 \end{cases}$$
"""

A = np.array([[5, -3], [1, -2]])
B = np.array([[21], [7]])
print(A)
print(B)

# Solution 1
X = np.dot(np.linalg.inv(A), B)
X

# Solution 2
X = np.linalg.solve(A, B)
X

"""Check the solution.

__Tip:__ Use the _np.allclose()_ function.
"""

np.allclose(np.dot(A, X), B)

"""### <a name='2'></a> Exercise 222
Solve the following system of equations using the numpy library:
Решете следната система от уравнения с помощта на библиотеката numpy:

$$\begin{cases}x + y + z = 1 \\ 2x + y + 5z = 0 \\ x - y = z \end{cases}$$
"""

A = np.array([[1, 1, 1], [2, 1, 5], [1, -1, -1]])
B = np.array([[1], [0], [0]])
print(A)
print(B)

# Solution 1
X = np.dot(np.linalg.inv(A), B)
X

# Solution 2
X = np.linalg.solve(A, B)
X

"""Check the solution.
Проверете решението.

__Tip:__ Use the _np.allclose()_ function.
"""

np.allclose(np.dot(A, X), B)

"""### <a name='3'></a> Exercise 223

Load the popular IRIS data set into the _data_raw_ variable using the _scikit-learn_ library.
Заредете популярния набор от данни IRIS в променливата _data_raw_ с помощта на библиотеката _scikit-learn_.
"""

from sklearn.datasets import load_iris

data_raw = load_iris()
data_raw

"""Display description of the IRIS dataset."""
"""Показване на описание на набора от данни IRIS."""

print(data_raw['DESCR'])

"""Display variable names in the dataset."""
"""Показване на имена на променливи в набора от данни."""

data_raw['feature_names']

"""Display class names in the dataset."""
"""Показване на имена на класове в набора от данни."""

data_raw['target_names']

"""### <a name='4'></a> Exercise 224
Assign the data (numpy table) of the IRIS file to the _data_ variable.
Присвоете данните (таблица numpy) на IRIS файла към променливата _data_.

"""

data = data_raw['data']

"""Assign the target variable values from the IRIS set to the _target_ variable."""
"""Присвоете стойностите на целевата променлива от набора IRIS към променливата _target_."""

target = data_raw['target']

"""Display the shape of the _data_ and _target_ variables."""
"""Показване на формата на променливите _data_ и _target_."""

print(data.shape)
print(target.shape)

"""### <a name='5'></a> Exercise 225
Split the data into training (_data_train_, _target_train_) and test (_data_test_, _target_test_) sets. The size of the test set is 30% of the samples.
Разделете данните на комплекти за обучение (_data_train_, _target_train_) и тестови (_data_test_, _target_test_). Размерът на тестовия набор е 30% от пробите.
"""

from sklearn.model_selection import train_test_split

data_train, data_test, target_train, target_test = train_test_split(data, target, test_size=0.3)

"""Display set size:
* _data_train_
* _target_train_
* _data_test_
* _target_test_
"""

print(f'data_train shape: {data_train.shape}')
print(f'target_train shape: {target_train.shape}')
print(f'data_test shape: {data_test.shape}')
print(f'target_test.shape: {target_test.shape}')

"""### <a name='6'></a> Exercise 226
Build a logistic regression model (set default parameter values) using the scikit-learn library and IRIS data.
Изградете логистичен регресионен модел (задайте стойности на параметрите по подразбиране), като използвате библиотеката scikit-learn и IRIS данни.
"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

"""Fit training data to the model."""
"""Напасване на тренировъчни данни към модела."""

model.fit(data_train, target_train)

"""### <a name='7'></a> Exercise 227
Evaluate the model on the training set.
Оценете модела на комплекта за обучение.
"""

model.score(data_train, target_train)

"""Evaluate the model on the test set."""
"""Оценете модела в тестовия комплект."""

model.score(data_test, target_test)

"""### <a name='8'></a> Exercise 228
Predict the test data based on the model and assign it to the _target\_pred_ variable.
Прогнозирайте тестовите данни въз основа на модела и ги присвоете на променливата _target\_pred_.
"""

target_pred = model.predict(data_test)

"""Display the _target\_pred_ variable."""
"""Показване на променливата _target\_pred_."""

target_pred

"""Display the _target\_test_ variable."""
"""Показване на променливата _target\_test_."""

target_test

"""### <a name='9'></a> Exercise 229
Calculate the confusion matrix.
Изчислете матрицата на объркването.
"""

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(target_test, target_pred)
cm

"""### <a name='10'></a> Exercise 230
Display the classification report.
Покажете доклада за класификация.
"""

from sklearn.metrics import classification_report

print(classification_report(target_test, target_pred))

