# -*- coding: utf-8 -*-
"""231-240_exercises_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kMfGqxxNACVVkWQHD8hKD1PvikSxFpfC

## Data Science Bootcamp

### Table of contents:
* [Import biblioteki](#0)
* [Exercise 231](#1)
* [Exercise 232](#2)
* [Exercise 233](#3)
* [Exercise 234](#4)
* [Exercise 235](#5)
* [Exercise 236](#6)
* [Exercise 237](#7)
* [Exercise 238](#8)
* [Exercise 239](#9)
* [Exercise 240](#10)

### <a name='0'></a> Import of libraries
"""

import numpy as np
import pandas as pd

np.__version__

"""### <a name='1'></a> Exercise 231
Import the _tensorflow_ version 2.x library.
Импортирайте библиотеката _tensorflow_ версия 2.x.
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf

tf.__version__

"""Load Fashion MNIST data using the _tensorflow_ library. Training set (_X\_train_, _y\_train_) and test set (_X\_test_, _y\_test_) respectively."""
"""Заредете данни на Fashion MNIST, като използвате библиотеката _tensorflow_. Набор за обучение (_X\_train_, _y\_train_) и тестов набор (_X\_test_, _y\_test_) съответно."""

from tensorflow.keras.datasets.fashion_mnist import load_data

(X_train, y_train), (X_test, y_test) = load_data()

"""Check the size of training and test sets."""
"""Проверете размера на комплектите за обучение и тестове."""

print(f'X_train shape: {X_train.shape}')
print(f'y_train shape: {y_train.shape}')
print(f'X_test shape: {X_test.shape}')
print(f'y_test shape: {y_test.shape}')

"""### <a name='2'></a> Exercise 232
Using the _matplotlib_ library, display an image from the training set with the index 40.
Използвайки библиотеката _matplotlib_, покажете изображение от набора за обучение с индекс 40.

"""

import matplotlib.pyplot as plt

plt.imshow(X_train[40], cmap='gray_r')

"""Display class number for a sample from a training set with an index of 40."""
"""Показване на номер на клас за извадка от обучителен набор с индекс 40."""

y_train[40]

"""### <a name='3'></a> Exercise 233

Standardize the data. Divide the values of the _X\_train_ and _X\_test_ tables by the value of 255.0.
Стандартизирайте данните. Разделете стойностите на таблиците _X\_train_ и _X\_test_ на стойността 255.0.
"""

X_train = X_train / 255.
X_test = X_test / 255.

"""### <a name='4'></a> Exercise 234
Import the _Sequential_ class from the _tensorflow_ library using the _keras_ package.
Импортирайте класа _Sequential_ от библиотеката _tensorflow_ с помощта на пакета _keras_.
"""

from tensorflow.keras.models import Sequential

"""Import the _Flatten_ and _Dense_ layers from the _tensorflow_ library using the _keras_ package."""
"""Импортирайте слоевете _Flatten_ и _Dense_ от библиотеката _tensorflow_ с помощта на пакета _keras_."""

from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense

"""### <a name='5'></a> Exercise 235
Build the _Sequential_ class model.
Изградете модела на _Sequential_ клас.
"""

model = Sequential()

"""Add the first layer of type _Flatten_ with the appropriately selected parameter _input_shape_."""
"""Добавете първия слой от тип _Flatten_ с подходящо избрания параметър _input_shape_."""

model.add(Flatten(input_shape=(28, 28)))

"""Add another layer of _Dense_ type with 128 neurons and _relu_ activation function."""
"""Добавете друг слой от тип _Dense_ със 128 неврона и функция за активиране на _relu_."""

model.add(Dense(units=128, activation='relu'))

"""Add the last layer of type _Dense_ with 10 neurons and the activation function _softmax_."""
"""Добавете последния слой от тип _Dense_ с 10 неврона и функцията за активиране _softmax_."""

model.add(Dense(units=10, activation='softmax'))

"""Display model summary."""
"""Показване на резюме на модела."""

model.summary()

"""### <a name='6'></a> Exercise 236
Compile the model. Use the _rmsprop_ optimizer, the loss function _sparse_categorical_crossentropy_, and the _accuracy_ metric.
Компилирайте модела. Използвайте оптимизатора _rmsprop_, функцията за загуба _sparse_categorical_crossentropy_ и показателя _accuracy_.
"""

model.compile(optimizer='rmsprop',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

"""### <a name='7'></a> Exercise 237
Fit the model to your training data by setting 10 epochs and `validation_split=0.2`.
Напаснете модела към вашите тренировъчни данни, като зададете 10 епохи и `validation_split=0.2`.
"""

history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

"""### <a name='8'></a> Exercise 238
Predict test data based on the model.
Прогнозирайте тестови данни въз основа на модела.
"""

y_pred = model.predict_classes(X_test)

"""Build a confusion matrix."""
"""Изградете матрица за объркване."""

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)
cm

"""### <a name='9'></a> Exercise 239
Build the _DataFrame_ pandas object containing model predictions. Name the column _prediction_ and assign it to the variable _results_.
Изградете обекта _DataFrame_ pandas, съдържащ моделни прогнози. Наименувайте колоната _prediction_ и я присвоете на променливата _results_.
"""

results = pd.DataFrame(y_pred, columns=['prediction'])
results

"""Assign a new column with the values from the _y\_test_ variable and name it _y\_test_."""
"""Присвоете нова колона със стойностите от променливата _y\_test_ и я наименувайте _y\_test_."""

results['y_test'] = y_test
results

"""Assign a new column called _is_misclassified_ that will return 1 if the samples are misclassified, otherwise 0."""
"""Присвоете нова колона, наречена _is_misclassified_, която ще върне 1, ако пробите са неправилно класифицирани, в противен случай 0."""

results['is_misclassified'] = (results['prediction'] != results['y_test']).astype('int')
results

"""### <a name='10'></a> Exercise 240
Save the _results_ to the _results.csv_ file.
Запазете _резултатите_ във файла _results.csv_.
"""

results.to_csv('results.csv', index=False)

!head results.csv

